%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: UTF8
%%Title: 2-100.pdf
%%Creator: (Adobe Acrobat 21.1.0)
%%For: richardjohansson
%%CreationDate: 2021-05-19, 08:44
%%BoundingBox: 0 0 1584 432
%%HiResBoundingBox: 0 0 1584 432
%%CropBox: 0 0 1584 432
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$None SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_AGM_Core/driver_media_override gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 574 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c017 91.164464, 2020/06/15-10:20:05        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreateDate="2021-05-04T22:14:29+02:00"
   xmp:CreatorTool="Matplotlib v3.3.4, https://matplotlib.org"
   pdf:Producer="Matplotlib pdf backend v3.3.4"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/driver_media_override gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -432 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 432 li
1584 432 li
1584 0 li
cp
clp
gsave
0 432 mo
1584 432 li
1584 0 li
0 0 li
0 432 li
clp
198 378 mo
1425.6 378 li
1425.6 51.8402 li
198 51.8402 li
198 378 li
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
gsave
198 378 mo
1425.6 378 li
1425.6 51.8402 li
198 51.8402 li
198 378 li
clp
.8 lw
2 lc
1 lj
10 ml
[] 0 dsh
true sadj
253.8 378 mo
253.8 51.84 li
1 /0 /CSD get_res sepcs
.309804 sep
@
grestore
253.8 378 mo
253.8 381.5 li
1 /0 /CSD get_res sepcs
1 sep
f
.8 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
253.8 378 mo
253.8 381.5 li
@
252.54 391.764 mo
255.98 391.764 li
255.98 392.594 li
251.35 392.594 li
251.35 391.764 li
251.72 391.384 252.23 390.864 252.88 390.204 cv
253.52 389.554 253.93 389.134 254.1 388.944 cv
254.42 388.594 254.64 388.294 254.76 388.044 cv
254.88 387.804 254.95 387.554 254.95 387.314 cv
254.95 386.934 254.81 386.614 254.54 386.374 cv
254.27 386.134 253.92 386.004 253.48 386.004 cv
253.17 386.004 252.84 386.064 252.5 386.164 cv
252.16 386.274 251.79 386.434 251.4 386.654 cv
251.4 385.654 li
251.8 385.494 252.17 385.374 252.51 385.294 cv
252.85 385.214 253.17 385.174 253.46 385.174 cv
254.21 385.174 254.81 385.364 255.26 385.744 cv
255.71 386.124 255.94 386.624 255.94 387.254 cv
255.94 387.554 255.88 387.844 255.77 388.104 cv
255.66 388.374 255.46 388.694 255.16 389.054 cv
255.08 389.154 254.82 389.424 254.38 389.874 cv
253.94 390.324 253.33 390.954 252.54 391.764 cv
f
gsave
198 378 mo
1425.6 378 li
1425.6 51.8402 li
198 51.8402 li
198 378 li
clp
2 lc
300.3 378 mo
300.3 51.84 li
1 /0 /CSD get_res sepcs
.309804 sep
@
grestore
300.3 378 mo
300.3 381.5 li
f
300.3 378 mo
300.3 381.5 li
@
300.42 388.554 mo
299.98 388.554 299.63 388.714 299.37 389.014 cv
299.11 389.314 298.98 389.734 298.98 390.254 cv
298.98 390.784 299.11 391.204 299.37 391.504 cv
299.63 391.804 299.98 391.954 300.42 391.954 cv
300.86 391.954 301.21 391.804 301.47 391.504 cv
301.73 391.204 301.86 390.784 301.86 390.254 cv
301.86 389.734 301.73 389.314 301.47 389.014 cv
301.21 388.714 300.86 388.554 300.42 388.554 cv
302.38 385.464 mo
302.38 386.364 li
302.13 386.244 301.88 386.154 301.63 386.094 cv
301.37 386.034 301.12 386.004 300.88 386.004 cv
300.22 386.004 299.72 386.224 299.38 386.664 cv
299.04 387.104 298.84 387.774 298.8 388.654 cv
298.99 388.374 299.23 388.154 299.52 388.004 cv
299.81 387.854 300.13 387.774 300.48 387.774 cv
301.21 387.774 301.79 388.004 302.21 388.444 cv
302.63 388.884 302.85 389.494 302.85 390.254 cv
302.85 391.004 302.62 391.604 302.18 392.054 cv
301.74 392.504 301.15 392.724 300.42 392.724 cv
299.58 392.724 298.93 392.404 298.49 391.764 cv
298.04 391.124 297.82 390.184 297.82 388.954 cv
297.82 387.804 298.09 386.884 298.64 386.204 cv
299.18 385.524 299.92 385.174 300.84 385.174 cv
301.08 385.174 301.33 385.204 301.59 385.244 cv
301.84 385.294 302.1 385.364 302.38 385.464 cv
f
gsave
198 378 mo
1425.6 378 li
1425.6 51.8402 li
198 51.8402 li
198 378 li
clp
2 lc
346.8 378 mo
346.8 51.84 li
1 /0 /CSD get_res sepcs
.309804 sep
@
grestore
346.8 378 mo
346.8 381.5 li
f
346.8 378 mo
346.8 381.5 li
@
341.681 391.764 mo
343.291 391.764 li
343.291 386.204 li
341.541 386.554 li
341.541 385.654 li
343.281 385.304 li
344.271 385.304 li
344.271 391.764 li
345.881 391.764 li
345.881 392.594 li
341.681 392.594 li
341.681 391.764 li
f
349.981 385.954 mo
349.471 385.954 349.091 386.204 348.831 386.704 cv
348.571 387.204 348.451 387.954 348.451 388.954 cv
348.451 389.954 348.571 390.704 348.831 391.204 cv
349.091 391.704 349.471 391.954 349.981 391.954 cv
350.491 391.954 350.871 391.704 351.131 391.204 cv
351.381 390.704 351.511 389.954 351.511 388.954 cv
351.511 387.954 351.381 387.204 351.131 386.704 cv
350.871 386.204 350.491 385.954 349.981 385.954 cv
349.981 385.174 mo
350.791 385.174 351.411 385.504 351.851 386.144 cv
352.281 386.794 352.501 387.734 352.501 388.954 cv
352.501 390.184 352.281 391.124 351.851 391.764 cv
351.411 392.404 350.791 392.724 349.981 392.724 cv
349.161 392.724 348.531 392.404 348.101 391.764 cv
347.671 391.124 347.461 390.184 347.461 388.954 cv
347.461 387.734 347.671 386.794 348.101 386.144 cv
348.531 385.504 349.161 385.174 349.981 385.174 cv
f
gsave
198 378 mo
1425.6 378 li
1425.6 51.8402 li
198 51.8402 li
198 378 li
clp
2 lc
393.3 378 mo
393.3 51.84 li
1 /0 /CSD get_res sepcs
.309804 sep
@
grestore
393.3 378 mo
393.3 381.5 li
f
393.3 378 mo
393.3 381.5 li
@
388.181 391.764 mo
389.791 391.764 li
389.791 386.204 li
388.041 386.554 li
388.041 385.654 li
389.781 385.304 li
390.771 385.304 li
390.771 391.764 li
392.381 391.764 li
392.381 392.594 li
388.181 392.594 li
388.181 391.764 li
f
397.081 386.164 mo
394.591 390.054 li
397.081 390.054 li
397.081 386.164 li
396.821 385.304 mo
398.061 385.304 li
398.061 390.054 li
399.101 390.054 li
399.101 390.874 li
398.061 390.874 li
398.061 392.594 li
397.081 392.594 li
397.081 390.874 li
393.791 390.874 li
393.791 389.924 li
396.821 385.304 li
f
gsave
198 378 mo
1425.6 378 li
1425.6 51.8402 li
198 51.8402 li
198 378 li
clp
2 lc
439.8 378 mo
439.8 51.84 li
1 /0 /CSD get_res sepcs
.309804 sep
@
grestore
439.8 378 mo
439.8 381.5 li
f
439.8 378 mo
439.8 381.5 li
@
434.681 391.764 mo
436.291 391.764 li
436.291 386.204 li
434.541 386.554 li
434.541 385.654 li
436.281 385.304 li
437.271 385.304 li
437.271 391.764 li
438.881 391.764 li
438.881 392.594 li
434.681 392.594 li
434.681 391.764 li
f
442.981 389.134 mo
442.511 389.134 442.141 389.264 441.871 389.514 cv
441.601 389.764 441.471 390.104 441.471 390.544 cv
441.471 390.984 441.601 391.334 441.871 391.584 cv
442.141 391.834 442.511 391.954 442.981 391.954 cv
443.441 391.954 443.811 391.834 444.081 391.574 cv
444.351 391.324 444.491 390.984 444.491 390.544 cv
444.491 390.104 444.351 389.764 444.091 389.514 cv
443.821 389.264 443.451 389.134 442.981 389.134 cv
441.991 388.714 mo
441.571 388.614 441.241 388.414 441.001 388.124 cv
440.761 387.834 440.651 387.484 440.651 387.064 cv
440.651 386.484 440.851 386.024 441.271 385.684 cv
441.681 385.344 442.251 385.174 442.981 385.174 cv
443.701 385.174 444.271 385.344 444.691 385.684 cv
445.101 386.024 445.311 386.484 445.311 387.064 cv
445.311 387.484 445.191 387.834 444.951 388.124 cv
444.711 388.414 444.391 388.614 443.971 388.714 cv
444.441 388.824 444.811 389.044 445.081 389.364 cv
445.341 389.684 445.481 390.084 445.481 390.544 cv
445.481 391.254 445.261 391.794 444.831 392.164 cv
444.391 392.544 443.781 392.724 442.981 392.724 cv
442.171 392.724 441.551 392.544 441.121 392.164 cv
440.691 391.794 440.481 391.254 440.481 390.544 cv
440.481 390.084 440.611 389.684 440.881 389.364 cv
441.141 389.044 441.511 388.824 441.991 388.714 cv
441.631 387.154 mo
441.631 387.534 441.741 387.834 441.981 388.044 cv
442.221 388.254 442.551 388.354 442.981 388.354 cv
443.401 388.354 443.731 388.254 443.971 388.044 cv
444.211 387.834 444.331 387.534 444.331 387.154 cv
444.331 386.774 444.211 386.484 443.971 386.274 cv
443.731 386.064 443.401 385.954 442.981 385.954 cv
442.551 385.954 442.221 386.064 441.981 386.274 cv
441.741 386.484 441.631 386.774 441.631 387.154 cv
f
gsave
198 378 mo
1425.6 378 li
1425.6 51.8402 li
198 51.8402 li
198 378 li
clp
2 lc
486.3 378 mo
486.3 51.84 li
1 /0 /CSD get_res sepcs
.309804 sep
@
grestore
486.3 378 mo
486.3 381.5 li
f
486.3 378 mo
486.3 381.5 li
@
481.861 391.764 mo
485.301 391.764 li
485.301 392.594 li
480.671 392.594 li
480.671 391.764 li
481.041 391.384 481.551 390.864 482.201 390.204 cv
482.841 389.554 483.251 389.134 483.421 388.944 cv
483.741 388.594 483.961 388.294 484.081 388.044 cv
484.201 387.804 484.271 387.554 484.271 387.314 cv
484.271 386.934 484.131 386.614 483.861 386.374 cv
483.591 386.134 483.241 386.004 482.801 386.004 cv
482.491 386.004 482.161 386.064 481.821 386.164 cv
481.481 386.274 481.111 386.434 480.721 386.654 cv
480.721 385.654 li
481.121 385.494 481.491 385.374 481.831 385.294 cv
482.171 385.214 482.491 385.174 482.781 385.174 cv
483.531 385.174 484.131 385.364 484.581 385.744 cv
485.031 386.124 485.261 386.624 485.261 387.254 cv
485.261 387.554 485.201 387.844 485.091 388.104 cv
484.981 388.374 484.781 388.694 484.481 389.054 cv
484.401 389.154 484.141 389.424 483.701 389.874 cv
483.261 390.324 482.651 390.954 481.861 391.764 cv
f
488.221 391.764 mo
491.661 391.764 li
491.661 392.594 li
487.031 392.594 li
487.031 391.764 li
487.401 391.384 487.911 390.864 488.561 390.204 cv
489.201 389.554 489.611 389.134 489.781 388.944 cv
490.101 388.594 490.321 388.294 490.441 388.044 cv
490.561 387.804 490.631 387.554 490.631 387.314 cv
490.631 386.934 490.491 386.614 490.221 386.374 cv
489.951 386.134 489.601 386.004 489.161 386.004 cv
488.851 386.004 488.521 386.064 488.181 386.164 cv
487.841 386.274 487.471 386.434 487.081 386.654 cv
487.081 385.654 li
487.481 385.494 487.851 385.374 488.191 385.294 cv
488.531 385.214 488.851 385.174 489.141 385.174 cv
489.891 385.174 490.491 385.364 490.941 385.744 cv
491.391 386.124 491.621 386.624 491.621 387.254 cv
491.621 387.554 491.561 387.844 491.451 388.104 cv
491.341 388.374 491.141 388.694 490.841 389.054 cv
490.761 389.154 490.501 389.424 490.061 389.874 cv
489.621 390.324 489.011 390.954 488.221 391.764 cv
f
gsave
198 378 mo
1425.6 378 li
1425.6 51.8402 li
198 51.8402 li
198 378 li
clp
2 lc
532.8 378 mo
532.8 51.84 li
1 /0 /CSD get_res sepcs
.309804 sep
@
grestore
532.8 378 mo
532.8 381.5 li
f
532.8 378 mo
532.8 381.5 li
@
528.361 391.764 mo
531.801 391.764 li
531.801 392.594 li
527.171 392.594 li
527.171 391.764 li
527.541 391.384 528.051 390.864 528.701 390.204 cv
529.341 389.554 529.751 389.134 529.921 388.944 cv
530.241 388.594 530.461 388.294 530.581 388.044 cv
530.701 387.804 530.771 387.554 530.771 387.314 cv
530.771 386.934 530.631 386.614 530.361 386.374 cv
530.091 386.134 529.741 386.004 529.301 386.004 cv
528.991 386.004 528.661 386.064 528.321 386.164 cv
527.981 386.274 527.611 386.434 527.221 386.654 cv
527.221 385.654 li
527.621 385.494 527.991 385.374 528.331 385.294 cv
528.671 385.214 528.991 385.174 529.281 385.174 cv
530.031 385.174 530.631 385.364 531.081 385.744 cv
531.531 386.124 531.761 386.624 531.761 387.254 cv
531.761 387.554 531.701 387.844 531.591 388.104 cv
531.481 388.374 531.281 388.694 530.981 389.054 cv
530.901 389.154 530.641 389.424 530.201 389.874 cv
529.761 390.324 529.151 390.954 528.361 391.764 cv
f
536.101 388.554 mo
535.661 388.554 535.311 388.714 535.051 389.014 cv
534.791 389.314 534.661 389.734 534.661 390.254 cv
534.661 390.784 534.791 391.204 535.051 391.504 cv
535.311 391.804 535.661 391.954 536.101 391.954 cv
536.541 391.954 536.891 391.804 537.151 391.504 cv
537.411 391.204 537.541 390.784 537.541 390.254 cv
537.541 389.734 537.411 389.314 537.151 389.014 cv
536.891 388.714 536.541 388.554 536.101 388.554 cv
538.061 385.464 mo
538.061 386.364 li
537.811 386.244 537.561 386.154 537.311 386.094 cv
537.051 386.034 536.801 386.004 536.561 386.004 cv
535.901 386.004 535.401 386.224 535.061 386.664 cv
534.721 387.104 534.521 387.774 534.481 388.654 cv
534.671 388.374 534.911 388.154 535.201 388.004 cv
535.491 387.854 535.811 387.774 536.161 387.774 cv
536.891 387.774 537.471 388.004 537.891 388.444 cv
538.311 388.884 538.531 389.494 538.531 390.254 cv
538.531 391.004 538.301 391.604 537.861 392.054 cv
537.421 392.504 536.831 392.724 536.101 392.724 cv
535.261 392.724 534.611 392.404 534.171 391.764 cv
533.721 391.124 533.501 390.184 533.501 388.954 cv
533.501 387.804 533.771 386.884 534.321 386.204 cv
534.861 385.524 535.601 385.174 536.521 385.174 cv
536.761 385.174 537.011 385.204 537.271 385.244 cv
537.521 385.294 537.781 385.364 538.061 385.464 cv
f
gsave
198 378 mo
1425.6 378 li
1425.6 51.8402 li
198 51.8402 li
198 378 li
clp
2 lc
579.3 378 mo
579.3 51.84 li
1 /0 /CSD get_res sepcs
.309804 sep
@
grestore
579.3 378 mo
579.3 381.5 li
f
579.3 378 mo
579.3 381.5 li
@
577.001 388.664 mo
577.471 388.764 577.841 388.974 578.101 389.294 cv
578.361 389.614 578.501 390.014 578.501 390.474 cv
578.501 391.194 578.251 391.754 577.761 392.144 cv
577.261 392.534 576.561 392.724 575.651 392.724 cv
575.341 392.724 575.021 392.694 574.701 392.634 cv
574.381 392.584 574.041 392.494 573.701 392.374 cv
573.701 391.424 li
573.971 391.584 574.271 391.704 574.601 391.784 cv
574.921 391.864 575.261 391.904 575.621 391.904 cv
576.241 391.904 576.711 391.784 577.031 391.544 cv
577.351 391.304 577.521 390.944 577.521 390.474 cv
577.521 390.054 577.371 389.714 577.071 389.474 cv
576.771 389.234 576.351 389.104 575.811 389.104 cv
574.961 389.104 li
574.961 388.294 li
575.851 388.294 li
576.331 388.294 576.701 388.204 576.961 388.004 cv
577.221 387.814 577.351 387.534 577.351 387.164 cv
577.351 386.794 577.211 386.504 576.951 386.304 cv
576.681 386.104 576.301 386.004 575.811 386.004 cv
575.541 386.004 575.251 386.034 574.941 386.094 cv
574.631 386.154 574.291 386.244 573.921 386.364 cv
573.921 385.484 li
574.291 385.384 574.641 385.304 574.971 385.254 cv
575.291 385.204 575.601 385.174 575.901 385.174 cv
576.641 385.174 577.231 385.344 577.671 385.684 cv
578.111 386.024 578.331 386.484 578.331 387.064 cv
578.331 387.464 578.211 387.804 577.981 388.084 cv
577.751 388.364 577.421 388.564 577.001 388.664 cv
f
582.481 385.954 mo
581.971 385.954 581.591 386.204 581.331 386.704 cv
581.071 387.204 580.951 387.954 580.951 388.954 cv
580.951 389.954 581.071 390.704 581.331 391.204 cv
581.591 391.704 581.971 391.954 582.481 391.954 cv
582.991 391.954 583.371 391.704 583.631 391.204 cv
583.881 390.704 584.011 389.954 584.011 388.954 cv
584.011 387.954 583.881 387.204 583.631 386.704 cv
583.371 386.204 582.991 385.954 582.481 385.954 cv
582.481 385.174 mo
583.291 385.174 583.911 385.504 584.351 386.144 cv
584.781 386.794 585.001 387.734 585.001 388.954 cv
585.001 390.184 584.781 391.124 584.351 391.764 cv
583.911 392.404 583.291 392.724 582.481 392.724 cv
581.661 392.724 581.031 392.404 580.601 391.764 cv
580.171 391.124 579.961 390.184 579.961 388.954 cv
579.961 387.734 580.171 386.794 580.601 386.144 cv
581.031 385.504 581.661 385.174 582.481 385.174 cv
f
gsave
198 378 mo
1425.6 378 li
1425.6 51.8402 li
198 51.8402 li
198 378 li
clp
2 lc
625.8 378 mo
625.8 51.84 li
1 /0 /CSD get_res sepcs
.309804 sep
@
grestore
625.8 378 mo
625.8 381.5 li
f
625.8 378 mo
625.8 381.5 li
@
623.501 388.664 mo
623.971 388.764 624.341 388.974 624.601 389.294 cv
624.861 389.614 625.001 390.014 625.001 390.474 cv
625.001 391.194 624.751 391.754 624.261 392.144 cv
623.761 392.534 623.061 392.724 622.151 392.724 cv
621.841 392.724 621.521 392.694 621.201 392.634 cv
620.881 392.584 620.541 392.494 620.201 392.374 cv
620.201 391.424 li
620.471 391.584 620.771 391.704 621.101 391.784 cv
621.421 391.864 621.761 391.904 622.121 391.904 cv
622.741 391.904 623.211 391.784 623.531 391.544 cv
623.851 391.304 624.021 390.944 624.021 390.474 cv
624.021 390.054 623.871 389.714 623.571 389.474 cv
623.271 389.234 622.851 389.104 622.311 389.104 cv
621.461 389.104 li
621.461 388.294 li
622.351 388.294 li
622.831 388.294 623.201 388.204 623.461 388.004 cv
623.721 387.814 623.851 387.534 623.851 387.164 cv
623.851 386.794 623.711 386.504 623.451 386.304 cv
623.181 386.104 622.801 386.004 622.311 386.004 cv
622.041 386.004 621.751 386.034 621.441 386.094 cv
621.131 386.154 620.791 386.244 620.421 386.364 cv
620.421 385.484 li
620.791 385.384 621.141 385.304 621.471 385.254 cv
621.791 385.204 622.101 385.174 622.401 385.174 cv
623.141 385.174 623.731 385.344 624.171 385.684 cv
624.611 386.024 624.831 386.484 624.831 387.064 cv
624.831 387.464 624.711 387.804 624.481 388.084 cv
624.251 388.364 623.921 388.564 623.501 388.664 cv
f
629.581 386.164 mo
627.091 390.054 li
629.581 390.054 li
629.581 386.164 li
629.321 385.304 mo
630.561 385.304 li
630.561 390.054 li
631.601 390.054 li
631.601 390.874 li
630.561 390.874 li
630.561 392.594 li
629.581 392.594 li
629.581 390.874 li
626.291 390.874 li
626.291 389.924 li
629.321 385.304 li
f
gsave
198 378 mo
1425.6 378 li
1425.6 51.8402 li
198 51.8402 li
198 378 li
clp
2 lc
672.3 378 mo
672.3 51.84 li
1 /0 /CSD get_res sepcs
.309804 sep
@
grestore
672.3 378 mo
672.3 381.5 li
f
672.3 378 mo
672.3 381.5 li
@
670.001 388.664 mo
670.471 388.764 670.841 388.974 671.101 389.294 cv
671.361 389.614 671.501 390.014 671.501 390.474 cv
671.501 391.194 671.251 391.754 670.761 392.144 cv
670.261 392.534 669.561 392.724 668.651 392.724 cv
668.341 392.724 668.021 392.694 667.701 392.634 cv
667.381 392.584 667.041 392.494 666.701 392.374 cv
666.701 391.424 li
666.971 391.584 667.271 391.704 667.601 391.784 cv
667.921 391.864 668.261 391.904 668.621 391.904 cv
669.241 391.904 669.711 391.784 670.031 391.544 cv
670.351 391.304 670.521 390.944 670.521 390.474 cv
670.521 390.054 670.371 389.714 670.071 389.474 cv
669.771 389.234 669.351 389.104 668.811 389.104 cv
667.961 389.104 li
667.961 388.294 li
668.851 388.294 li
669.331 388.294 669.701 388.204 669.961 388.004 cv
670.221 387.814 670.351 387.534 670.351 387.164 cv
670.351 386.794 670.211 386.504 669.951 386.304 cv
669.681 386.104 669.301 386.004 668.811 386.004 cv
668.541 386.004 668.251 386.034 667.941 386.094 cv
667.631 386.154 667.291 386.244 666.921 386.364 cv
666.921 385.484 li
667.291 385.384 667.641 385.304 667.971 385.254 cv
668.291 385.204 668.601 385.174 668.901 385.174 cv
669.641 385.174 670.231 385.344 670.671 385.684 cv
671.111 386.024 671.331 386.484 671.331 387.064 cv
671.331 387.464 671.211 387.804 670.981 388.084 cv
670.751 388.364 670.421 388.564 670.001 388.664 cv
f
675.481 389.134 mo
675.011 389.134 674.641 389.264 674.371 389.514 cv
674.101 389.764 673.971 390.104 673.971 390.544 cv
673.971 390.984 674.101 391.334 674.371 391.584 cv
674.641 391.834 675.011 391.954 675.481 391.954 cv
675.941 391.954 676.311 391.834 676.581 391.574 cv
676.851 391.324 676.991 390.984 676.991 390.544 cv
676.991 390.104 676.851 389.764 676.591 389.514 cv
676.321 389.264 675.951 389.134 675.481 389.134 cv
674.491 388.714 mo
674.071 388.614 673.741 388.414 673.501 388.124 cv
673.261 387.834 673.151 387.484 673.151 387.064 cv
673.151 386.484 673.351 386.024 673.771 385.684 cv
674.181 385.344 674.751 385.174 675.481 385.174 cv
676.201 385.174 676.771 385.344 677.191 385.684 cv
677.601 386.024 677.811 386.484 677.811 387.064 cv
677.811 387.484 677.691 387.834 677.451 388.124 cv
677.211 388.414 676.891 388.614 676.471 388.714 cv
676.941 388.824 677.311 389.044 677.581 389.364 cv
677.841 389.684 677.981 390.084 677.981 390.544 cv
677.981 391.254 677.761 391.794 677.331 392.164 cv
676.891 392.544 676.281 392.724 675.481 392.724 cv
674.671 392.724 674.051 392.544 673.621 392.164 cv
673.191 391.794 672.981 391.254 672.981 390.544 cv
672.981 390.084 673.111 389.684 673.381 389.364 cv
673.641 389.044 674.011 388.824 674.491 388.714 cv
674.131 387.154 mo
674.131 387.534 674.241 387.834 674.481 388.044 cv
674.721 388.254 675.051 388.354 675.481 388.354 cv
675.901 388.354 676.231 388.254 676.471 388.044 cv
676.711 387.834 676.831 387.534 676.831 387.154 cv
676.831 386.774 676.711 386.484 676.471 386.274 cv
676.231 386.064 675.901 385.954 675.481 385.954 cv
675.051 385.954 674.721 386.064 674.481 386.274 cv
674.241 386.484 674.131 386.774 674.131 387.154 cv
f
gsave
198 378 mo
1425.6 378 li
1425.6 51.8402 li
198 51.8402 li
198 378 li
clp
2 lc
718.8 378 mo
718.8 51.84 li
1 /0 /CSD get_res sepcs
.309804 sep
@
grestore
718.8 378 mo
718.8 381.5 li
f
718.8 378 mo
718.8 381.5 li
@
716.221 386.164 mo
713.731 390.054 li
716.221 390.054 li
716.221 386.164 li
715.961 385.304 mo
717.201 385.304 li
717.201 390.054 li
718.241 390.054 li
718.241 390.874 li
717.201 390.874 li
717.201 392.594 li
716.221 392.594 li
716.221 390.874 li
712.931 390.874 li
712.931 389.924 li
715.961 385.304 li
f
720.721 391.764 mo
724.161 391.764 li
724.161 392.594 li
719.531 392.594 li
719.531 391.764 li
719.901 391.384 720.411 390.864 721.061 390.204 cv
721.701 389.554 722.111 389.134 722.281 388.944 cv
722.601 388.594 722.821 388.294 722.941 388.044 cv
723.061 387.804 723.131 387.554 723.131 387.314 cv
723.131 386.934 722.991 386.614 722.721 386.374 cv
722.451 386.134 722.101 386.004 721.661 386.004 cv
721.351 386.004 721.021 386.064 720.681 386.164 cv
720.341 386.274 719.971 386.434 719.581 386.654 cv
719.581 385.654 li
719.981 385.494 720.351 385.374 720.691 385.294 cv
721.031 385.214 721.351 385.174 721.641 385.174 cv
722.391 385.174 722.991 385.364 723.441 385.744 cv
723.891 386.124 724.121 386.624 724.121 387.254 cv
724.121 387.554 724.061 387.844 723.951 388.104 cv
723.841 388.374 723.641 388.694 723.341 389.054 cv
723.261 389.154 723.001 389.424 722.561 389.874 cv
722.121 390.324 721.511 390.954 720.721 391.764 cv
f
gsave
198 378 mo
1425.6 378 li
1425.6 51.8402 li
198 51.8402 li
198 378 li
clp
2 lc
765.3 378 mo
765.3 51.84 li
1 /0 /CSD get_res sepcs
.309804 sep
@
grestore
765.3 378 mo
765.3 381.5 li
f
765.3 378 mo
765.3 381.5 li
@
762.721 386.164 mo
760.231 390.054 li
762.721 390.054 li
762.721 386.164 li
762.461 385.304 mo
763.701 385.304 li
763.701 390.054 li
764.741 390.054 li
764.741 390.874 li
763.701 390.874 li
763.701 392.594 li
762.721 392.594 li
762.721 390.874 li
759.431 390.874 li
759.431 389.924 li
762.461 385.304 li
f
768.601 388.554 mo
768.161 388.554 767.811 388.714 767.551 389.014 cv
767.291 389.314 767.161 389.734 767.161 390.254 cv
767.161 390.784 767.291 391.204 767.551 391.504 cv
767.811 391.804 768.161 391.954 768.601 391.954 cv
769.041 391.954 769.391 391.804 769.651 391.504 cv
769.911 391.204 770.041 390.784 770.041 390.254 cv
770.041 389.734 769.911 389.314 769.651 389.014 cv
769.391 388.714 769.041 388.554 768.601 388.554 cv
770.561 385.464 mo
770.561 386.364 li
770.311 386.244 770.061 386.154 769.811 386.094 cv
769.551 386.034 769.301 386.004 769.061 386.004 cv
768.401 386.004 767.901 386.224 767.561 386.664 cv
767.221 387.104 767.021 387.774 766.981 388.654 cv
767.171 388.374 767.411 388.154 767.701 388.004 cv
767.991 387.854 768.311 387.774 768.661 387.774 cv
769.391 387.774 769.971 388.004 770.391 388.444 cv
770.811 388.884 771.031 389.494 771.031 390.254 cv
771.031 391.004 770.801 391.604 770.361 392.054 cv
769.921 392.504 769.331 392.724 768.601 392.724 cv
767.761 392.724 767.111 392.404 766.671 391.764 cv
766.221 391.124 766.001 390.184 766.001 388.954 cv
766.001 387.804 766.271 386.884 766.821 386.204 cv
767.361 385.524 768.101 385.174 769.021 385.174 cv
769.261 385.174 769.511 385.204 769.771 385.244 cv
770.021 385.294 770.281 385.364 770.561 385.464 cv
f
gsave
198 378 mo
1425.6 378 li
1425.6 51.8402 li
198 51.8402 li
198 378 li
clp
2 lc
811.8 378 mo
811.8 51.84 li
1 /0 /CSD get_res sepcs
.309804 sep
@
grestore
811.8 378 mo
811.8 381.5 li
f
811.8 378 mo
811.8 381.5 li
@
806.521 385.304 mo
810.391 385.304 li
810.391 386.134 li
807.421 386.134 li
807.421 387.924 li
807.561 387.874 807.711 387.834 807.851 387.814 cv
807.991 387.794 808.141 387.774 808.281 387.774 cv
809.091 387.774 809.731 388.004 810.211 388.444 cv
810.691 388.894 810.931 389.494 810.931 390.254 cv
810.931 391.044 810.681 391.654 810.191 392.084 cv
809.701 392.514 809.011 392.724 808.131 392.724 cv
807.821 392.724 807.511 392.694 807.191 392.654 cv
806.871 392.604 806.551 392.534 806.211 392.424 cv
806.211 391.434 li
806.501 391.594 806.801 391.714 807.121 391.794 cv
807.431 391.874 807.761 391.904 808.111 391.904 cv
808.671 391.904 809.121 391.764 809.451 391.464 cv
809.771 391.164 809.941 390.764 809.941 390.254 cv
809.941 389.754 809.771 389.354 809.451 389.054 cv
809.121 388.754 808.671 388.604 808.111 388.604 cv
807.851 388.604 807.581 388.634 807.321 388.694 cv
807.061 388.754 806.791 388.844 806.521 388.964 cv
806.521 385.304 li
f
814.981 385.954 mo
814.471 385.954 814.091 386.204 813.831 386.704 cv
813.571 387.204 813.451 387.954 813.451 388.954 cv
813.451 389.954 813.571 390.704 813.831 391.204 cv
814.091 391.704 814.471 391.954 814.981 391.954 cv
815.491 391.954 815.871 391.704 816.131 391.204 cv
816.381 390.704 816.511 389.954 816.511 388.954 cv
816.511 387.954 816.381 387.204 816.131 386.704 cv
815.871 386.204 815.491 385.954 814.981 385.954 cv
814.981 385.174 mo
815.791 385.174 816.411 385.504 816.851 386.144 cv
817.281 386.794 817.501 387.734 817.501 388.954 cv
817.501 390.184 817.281 391.124 816.851 391.764 cv
816.411 392.404 815.791 392.724 814.981 392.724 cv
814.161 392.724 813.531 392.404 813.101 391.764 cv
812.671 391.124 812.461 390.184 812.461 388.954 cv
812.461 387.734 812.671 386.794 813.101 386.144 cv
813.531 385.504 814.161 385.174 814.981 385.174 cv
f
gsave
198 378 mo
1425.6 378 li
1425.6 51.8402 li
198 51.8402 li
198 378 li
clp
2 lc
858.3 378 mo
858.3 51.84 li
1 /0 /CSD get_res sepcs
.309804 sep
@
grestore
858.3 378 mo
858.3 381.5 li
f
858.3 378 mo
858.3 381.5 li
@
853.021 385.304 mo
856.891 385.304 li
856.891 386.134 li
853.921 386.134 li
853.921 387.924 li
854.061 387.874 854.211 387.834 854.351 387.814 cv
854.491 387.794 854.641 387.774 854.781 387.774 cv
855.591 387.774 856.231 388.004 856.711 388.444 cv
857.191 388.894 857.431 389.494 857.431 390.254 cv
857.431 391.044 857.181 391.654 856.691 392.084 cv
856.201 392.514 855.511 392.724 854.631 392.724 cv
854.321 392.724 854.011 392.694 853.691 392.654 cv
853.371 392.604 853.051 392.534 852.711 392.424 cv
852.711 391.434 li
853.001 391.594 853.301 391.714 853.621 391.794 cv
853.931 391.874 854.261 391.904 854.611 391.904 cv
855.171 391.904 855.621 391.764 855.951 391.464 cv
856.271 391.164 856.441 390.764 856.441 390.254 cv
856.441 389.754 856.271 389.354 855.951 389.054 cv
855.621 388.754 855.171 388.604 854.611 388.604 cv
854.351 388.604 854.081 388.634 853.821 388.694 cv
853.561 388.754 853.291 388.844 853.021 388.964 cv
853.021 385.304 li
f
862.081 386.164 mo
859.591 390.054 li
862.081 390.054 li
862.081 386.164 li
861.821 385.304 mo
863.061 385.304 li
863.061 390.054 li
864.101 390.054 li
864.101 390.874 li
863.061 390.874 li
863.061 392.594 li
862.081 392.594 li
862.081 390.874 li
858.791 390.874 li
858.791 389.924 li
861.821 385.304 li
f
gsave
198 378 mo
1425.6 378 li
1425.6 51.8402 li
198 51.8402 li
198 378 li
clp
2 lc
904.8 378 mo
904.8 51.84 li
1 /0 /CSD get_res sepcs
.309804 sep
@
grestore
904.8 378 mo
904.8 381.5 li
f
904.8 378 mo
904.8 381.5 li
@
899.521 385.304 mo
903.391 385.304 li
903.391 386.134 li
900.421 386.134 li
900.421 387.924 li
900.561 387.874 900.711 387.834 900.851 387.814 cv
900.991 387.794 901.141 387.774 901.281 387.774 cv
902.091 387.774 902.731 388.004 903.211 388.444 cv
903.691 388.894 903.931 389.494 903.931 390.254 cv
903.931 391.044 903.681 391.654 903.191 392.084 cv
902.701 392.514 902.011 392.724 901.131 392.724 cv
900.821 392.724 900.511 392.694 900.191 392.654 cv
899.871 392.604 899.551 392.534 899.211 392.424 cv
899.211 391.434 li
899.501 391.594 899.801 391.714 900.121 391.794 cv
900.431 391.874 900.761 391.904 901.111 391.904 cv
901.671 391.904 902.121 391.764 902.451 391.464 cv
902.771 391.164 902.941 390.764 902.941 390.254 cv
902.941 389.754 902.771 389.354 902.451 389.054 cv
902.121 388.754 901.671 388.604 901.111 388.604 cv
900.851 388.604 900.581 388.634 900.321 388.694 cv
900.061 388.754 899.791 388.844 899.521 388.964 cv
899.521 385.304 li
f
907.981 389.134 mo
907.511 389.134 907.141 389.264 906.871 389.514 cv
906.601 389.764 906.471 390.104 906.471 390.544 cv
906.471 390.984 906.601 391.334 906.871 391.584 cv
907.141 391.834 907.511 391.954 907.981 391.954 cv
908.441 391.954 908.811 391.834 909.081 391.574 cv
909.351 391.324 909.491 390.984 909.491 390.544 cv
909.491 390.104 909.351 389.764 909.091 389.514 cv
908.821 389.264 908.451 389.134 907.981 389.134 cv
906.991 388.714 mo
906.571 388.614 906.241 388.414 906.001 388.124 cv
905.761 387.834 905.651 387.484 905.651 387.064 cv
905.651 386.484 905.851 386.024 906.271 385.684 cv
906.681 385.344 907.251 385.174 907.981 385.174 cv
908.701 385.174 909.271 385.344 909.691 385.684 cv
910.101 386.024 910.311 386.484 910.311 387.064 cv
910.311 387.484 910.191 387.834 909.951 388.124 cv
909.711 388.414 909.391 388.614 908.971 388.714 cv
909.441 388.824 909.811 389.044 910.081 389.364 cv
910.341 389.684 910.481 390.084 910.481 390.544 cv
910.481 391.254 910.261 391.794 909.831 392.164 cv
909.391 392.544 908.781 392.724 907.981 392.724 cv
907.171 392.724 906.551 392.544 906.121 392.164 cv
905.691 391.794 905.481 391.254 905.481 390.544 cv
905.481 390.084 905.611 389.684 905.881 389.364 cv
906.141 389.044 906.511 388.824 906.991 388.714 cv
906.631 387.154 mo
906.631 387.534 906.741 387.834 906.981 388.044 cv
907.221 388.254 907.551 388.354 907.981 388.354 cv
908.401 388.354 908.731 388.254 908.971 388.044 cv
909.211 387.834 909.331 387.534 909.331 387.154 cv
909.331 386.774 909.211 386.484 908.971 386.274 cv
908.731 386.064 908.401 385.954 907.981 385.954 cv
907.551 385.954 907.221 386.064 906.981 386.274 cv
906.741 386.484 906.631 386.774 906.631 387.154 cv
f
gsave
198 378 mo
1425.6 378 li
1425.6 51.8402 li
198 51.8402 li
198 378 li
clp
2 lc
951.3 378 mo
951.3 51.84 li
1 /0 /CSD get_res sepcs
.309804 sep
@
grestore
951.3 378 mo
951.3 381.5 li
f
951.3 378 mo
951.3 381.5 li
@
948.241 388.554 mo
947.801 388.554 947.451 388.714 947.191 389.014 cv
946.931 389.314 946.801 389.734 946.801 390.254 cv
946.801 390.784 946.931 391.204 947.191 391.504 cv
947.451 391.804 947.801 391.954 948.241 391.954 cv
948.681 391.954 949.031 391.804 949.291 391.504 cv
949.551 391.204 949.681 390.784 949.681 390.254 cv
949.681 389.734 949.551 389.314 949.291 389.014 cv
949.031 388.714 948.681 388.554 948.241 388.554 cv
950.201 385.464 mo
950.201 386.364 li
949.951 386.244 949.701 386.154 949.451 386.094 cv
949.191 386.034 948.941 386.004 948.701 386.004 cv
948.041 386.004 947.541 386.224 947.201 386.664 cv
946.861 387.104 946.661 387.774 946.621 388.654 cv
946.811 388.374 947.051 388.154 947.341 388.004 cv
947.631 387.854 947.951 387.774 948.301 387.774 cv
949.031 387.774 949.611 388.004 950.031 388.444 cv
950.451 388.884 950.671 389.494 950.671 390.254 cv
950.671 391.004 950.441 391.604 950.001 392.054 cv
949.561 392.504 948.971 392.724 948.241 392.724 cv
947.401 392.724 946.751 392.404 946.311 391.764 cv
945.861 391.124 945.641 390.184 945.641 388.954 cv
945.641 387.804 945.911 386.884 946.461 386.204 cv
947.001 385.524 947.741 385.174 948.661 385.174 cv
948.901 385.174 949.151 385.204 949.411 385.244 cv
949.661 385.294 949.921 385.364 950.201 385.464 cv
f
953.221 391.764 mo
956.661 391.764 li
956.661 392.594 li
952.031 392.594 li
952.031 391.764 li
952.401 391.384 952.911 390.864 953.561 390.204 cv
954.201 389.554 954.611 389.134 954.781 388.944 cv
955.101 388.594 955.321 388.294 955.441 388.044 cv
955.561 387.804 955.631 387.554 955.631 387.314 cv
955.631 386.934 955.491 386.614 955.221 386.374 cv
954.951 386.134 954.601 386.004 954.161 386.004 cv
953.851 386.004 953.521 386.064 953.181 386.164 cv
952.841 386.274 952.471 386.434 952.081 386.654 cv
952.081 385.654 li
952.481 385.494 952.851 385.374 953.191 385.294 cv
953.531 385.214 953.851 385.174 954.141 385.174 cv
954.891 385.174 955.491 385.364 955.941 385.744 cv
956.391 386.124 956.621 386.624 956.621 387.254 cv
956.621 387.554 956.561 387.844 956.451 388.104 cv
956.341 388.374 956.141 388.694 955.841 389.054 cv
955.761 389.154 955.501 389.424 955.061 389.874 cv
954.621 390.324 954.011 390.954 953.221 391.764 cv
f
gsave
198 378 mo
1425.6 378 li
1425.6 51.8402 li
198 51.8402 li
198 378 li
clp
2 lc
997.8 378 mo
997.8 51.84 li
1 /0 /CSD get_res sepcs
.309804 sep
@
grestore
997.8 378 mo
997.8 381.5 li
f
997.8 378 mo
997.8 381.5 li
@
994.741 388.554 mo
994.301 388.554 993.951 388.714 993.691 389.014 cv
993.431 389.314 993.301 389.734 993.301 390.254 cv
993.301 390.784 993.431 391.204 993.691 391.504 cv
993.951 391.804 994.301 391.954 994.741 391.954 cv
995.181 391.954 995.531 391.804 995.791 391.504 cv
996.051 391.204 996.181 390.784 996.181 390.254 cv
996.181 389.734 996.051 389.314 995.791 389.014 cv
995.531 388.714 995.181 388.554 994.741 388.554 cv
996.701 385.464 mo
996.701 386.364 li
996.451 386.244 996.201 386.154 995.951 386.094 cv
995.691 386.034 995.441 386.004 995.201 386.004 cv
994.541 386.004 994.041 386.224 993.701 386.664 cv
993.361 387.104 993.161 387.774 993.121 388.654 cv
993.311 388.374 993.551 388.154 993.841 388.004 cv
994.131 387.854 994.451 387.774 994.801 387.774 cv
995.531 387.774 996.111 388.004 996.531 388.444 cv
996.951 388.884 997.171 389.494 997.171 390.254 cv
997.171 391.004 996.941 391.604 996.501 392.054 cv
996.061 392.504 995.471 392.724 994.741 392.724 cv
993.901 392.724 993.251 392.404 992.811 391.764 cv
992.361 391.124 992.141 390.184 992.141 388.954 cv
992.141 387.804 992.411 386.884 992.961 386.204 cv
993.501 385.524 994.241 385.174 995.161 385.174 cv
995.401 385.174 995.651 385.204 995.911 385.244 cv
996.161 385.294 996.421 385.364 996.701 385.464 cv
f
1001.1 388.554 mo
1000.66 388.554 1000.31 388.714 1000.05 389.014 cv
999.791 389.314 999.661 389.734 999.661 390.254 cv
999.661 390.784 999.791 391.204 1000.05 391.504 cv
1000.31 391.804 1000.66 391.954 1001.1 391.954 cv
1001.54 391.954 1001.89 391.804 1002.15 391.504 cv
1002.41 391.204 1002.54 390.784 1002.54 390.254 cv
1002.54 389.734 1002.41 389.314 1002.15 389.014 cv
1001.89 388.714 1001.54 388.554 1001.1 388.554 cv
1003.06 385.464 mo
1003.06 386.364 li
1002.81 386.244 1002.56 386.154 1002.31 386.094 cv
1002.05 386.034 1001.8 386.004 1001.56 386.004 cv
1000.9 386.004 1000.4 386.224 1000.06 386.664 cv
999.721 387.104 999.521 387.774 999.481 388.654 cv
999.671 388.374 999.911 388.154 1000.2 388.004 cv
1000.49 387.854 1000.81 387.774 1001.16 387.774 cv
1001.89 387.774 1002.47 388.004 1002.89 388.444 cv
1003.31 388.884 1003.53 389.494 1003.53 390.254 cv
1003.53 391.004 1003.3 391.604 1002.86 392.054 cv
1002.42 392.504 1001.83 392.724 1001.1 392.724 cv
1000.26 392.724 999.611 392.404 999.171 391.764 cv
998.721 391.124 998.501 390.184 998.501 388.954 cv
998.501 387.804 998.771 386.884 999.321 386.204 cv
999.861 385.524 1000.6 385.174 1001.52 385.174 cv
1001.76 385.174 1002.01 385.204 1002.27 385.244 cv
1002.52 385.294 1002.78 385.364 1003.06 385.464 cv
f
gsave
198 378 mo
1425.6 378 li
1425.6 51.8402 li
198 51.8402 li
198 378 li
clp
2 lc
1044.3 378 mo
1044.3 51.84 li
1 /0 /CSD get_res sepcs
.309804 sep
@
grestore
1044.3 378 mo
1044.3 381.5 li
f
1044.3 378 mo
1044.3 381.5 li
@
1038.76 385.304 mo
1043.45 385.304 li
1043.45 385.724 li
1040.8 392.594 li
1039.77 392.594 li
1042.26 386.134 li
1038.76 386.134 li
1038.76 385.304 li
f
1047.48 385.954 mo
1046.97 385.954 1046.59 386.204 1046.33 386.704 cv
1046.07 387.204 1045.95 387.954 1045.95 388.954 cv
1045.95 389.954 1046.07 390.704 1046.33 391.204 cv
1046.59 391.704 1046.97 391.954 1047.48 391.954 cv
1047.99 391.954 1048.37 391.704 1048.63 391.204 cv
1048.88 390.704 1049.01 389.954 1049.01 388.954 cv
1049.01 387.954 1048.88 387.204 1048.63 386.704 cv
1048.37 386.204 1047.99 385.954 1047.48 385.954 cv
1047.48 385.174 mo
1048.29 385.174 1048.91 385.504 1049.35 386.144 cv
1049.78 386.794 1050 387.734 1050 388.954 cv
1050 390.184 1049.78 391.124 1049.35 391.764 cv
1048.91 392.404 1048.29 392.724 1047.48 392.724 cv
1046.66 392.724 1046.03 392.404 1045.6 391.764 cv
1045.17 391.124 1044.96 390.184 1044.96 388.954 cv
1044.96 387.734 1045.17 386.794 1045.6 386.144 cv
1046.03 385.504 1046.66 385.174 1047.48 385.174 cv
f
gsave
198 378 mo
1425.6 378 li
1425.6 51.8402 li
198 51.8402 li
198 378 li
clp
2 lc
1090.8 378 mo
1090.8 51.84 li
1 /0 /CSD get_res sepcs
.309804 sep
@
grestore
1090.8 378 mo
1090.8 381.5 li
f
1090.8 378 mo
1090.8 381.5 li
@
1085.26 385.304 mo
1089.95 385.304 li
1089.95 385.724 li
1087.3 392.594 li
1086.27 392.594 li
1088.76 386.134 li
1085.26 386.134 li
1085.26 385.304 li
f
1094.58 386.164 mo
1092.09 390.054 li
1094.58 390.054 li
1094.58 386.164 li
1094.32 385.304 mo
1095.56 385.304 li
1095.56 390.054 li
1096.6 390.054 li
1096.6 390.874 li
1095.56 390.874 li
1095.56 392.594 li
1094.58 392.594 li
1094.58 390.874 li
1091.29 390.874 li
1091.29 389.924 li
1094.32 385.304 li
f
gsave
198 378 mo
1425.6 378 li
1425.6 51.8402 li
198 51.8402 li
198 378 li
clp
2 lc
1137.3 378 mo
1137.3 51.84 li
1 /0 /CSD get_res sepcs
.309804 sep
@
grestore
1137.3 378 mo
1137.3 381.5 li
f
1137.3 378 mo
1137.3 381.5 li
@
1131.76 385.304 mo
1136.45 385.304 li
1136.45 385.724 li
1133.8 392.594 li
1132.77 392.594 li
1135.26 386.134 li
1131.76 386.134 li
1131.76 385.304 li
f
1140.48 389.134 mo
1140.01 389.134 1139.64 389.264 1139.37 389.514 cv
1139.1 389.764 1138.97 390.104 1138.97 390.544 cv
1138.97 390.984 1139.1 391.334 1139.37 391.584 cv
1139.64 391.834 1140.01 391.954 1140.48 391.954 cv
1140.94 391.954 1141.31 391.834 1141.58 391.574 cv
1141.85 391.324 1141.99 390.984 1141.99 390.544 cv
1141.99 390.104 1141.85 389.764 1141.59 389.514 cv
1141.32 389.264 1140.95 389.134 1140.48 389.134 cv
1139.49 388.714 mo
1139.07 388.614 1138.74 388.414 1138.5 388.124 cv
1138.26 387.834 1138.15 387.484 1138.15 387.064 cv
1138.15 386.484 1138.35 386.024 1138.77 385.684 cv
1139.18 385.344 1139.75 385.174 1140.48 385.174 cv
1141.2 385.174 1141.77 385.344 1142.19 385.684 cv
1142.6 386.024 1142.81 386.484 1142.81 387.064 cv
1142.81 387.484 1142.69 387.834 1142.45 388.124 cv
1142.21 388.414 1141.89 388.614 1141.47 388.714 cv
1141.94 388.824 1142.31 389.044 1142.58 389.364 cv
1142.84 389.684 1142.98 390.084 1142.98 390.544 cv
1142.98 391.254 1142.76 391.794 1142.33 392.164 cv
1141.89 392.544 1141.28 392.724 1140.48 392.724 cv
1139.67 392.724 1139.05 392.544 1138.62 392.164 cv
1138.19 391.794 1137.98 391.254 1137.98 390.544 cv
1137.98 390.084 1138.11 389.684 1138.38 389.364 cv
1138.64 389.044 1139.01 388.824 1139.49 388.714 cv
1139.13 387.154 mo
1139.13 387.534 1139.24 387.834 1139.48 388.044 cv
1139.72 388.254 1140.05 388.354 1140.48 388.354 cv
1140.9 388.354 1141.23 388.254 1141.47 388.044 cv
1141.71 387.834 1141.83 387.534 1141.83 387.154 cv
1141.83 386.774 1141.71 386.484 1141.47 386.274 cv
1141.23 386.064 1140.9 385.954 1140.48 385.954 cv
1140.05 385.954 1139.72 386.064 1139.48 386.274 cv
1139.24 386.484 1139.13 386.774 1139.13 387.154 cv
f
gsave
198 378 mo
1425.6 378 li
1425.6 51.8402 li
198 51.8402 li
198 378 li
clp
2 lc
1183.8 378 mo
1183.8 51.84 li
1 /0 /CSD get_res sepcs
.309804 sep
@
grestore
1183.8 378 mo
1183.8 381.5 li
f
1183.8 378 mo
1183.8 381.5 li
@
1180.62 389.134 mo
1180.15 389.134 1179.78 389.264 1179.51 389.514 cv
1179.24 389.764 1179.11 390.104 1179.11 390.544 cv
1179.11 390.984 1179.24 391.334 1179.51 391.584 cv
1179.78 391.834 1180.15 391.954 1180.62 391.954 cv
1181.08 391.954 1181.45 391.834 1181.72 391.574 cv
1181.99 391.324 1182.13 390.984 1182.13 390.544 cv
1182.13 390.104 1181.99 389.764 1181.73 389.514 cv
1181.46 389.264 1181.09 389.134 1180.62 389.134 cv
1179.63 388.714 mo
1179.21 388.614 1178.88 388.414 1178.64 388.124 cv
1178.4 387.834 1178.29 387.484 1178.29 387.064 cv
1178.29 386.484 1178.49 386.024 1178.91 385.684 cv
1179.32 385.344 1179.89 385.174 1180.62 385.174 cv
1181.34 385.174 1181.91 385.344 1182.33 385.684 cv
1182.74 386.024 1182.95 386.484 1182.95 387.064 cv
1182.95 387.484 1182.83 387.834 1182.59 388.124 cv
1182.35 388.414 1182.03 388.614 1181.61 388.714 cv
1182.08 388.824 1182.45 389.044 1182.72 389.364 cv
1182.98 389.684 1183.12 390.084 1183.12 390.544 cv
1183.12 391.254 1182.9 391.794 1182.47 392.164 cv
1182.03 392.544 1181.42 392.724 1180.62 392.724 cv
1179.81 392.724 1179.19 392.544 1178.76 392.164 cv
1178.33 391.794 1178.12 391.254 1178.12 390.544 cv
1178.12 390.084 1178.25 389.684 1178.52 389.364 cv
1178.78 389.044 1179.15 388.824 1179.63 388.714 cv
1179.27 387.154 mo
1179.27 387.534 1179.38 387.834 1179.62 388.044 cv
1179.86 388.254 1180.19 388.354 1180.62 388.354 cv
1181.04 388.354 1181.37 388.254 1181.61 388.044 cv
1181.85 387.834 1181.97 387.534 1181.97 387.154 cv
1181.97 386.774 1181.85 386.484 1181.61 386.274 cv
1181.37 386.064 1181.04 385.954 1180.62 385.954 cv
1180.19 385.954 1179.86 386.064 1179.62 386.274 cv
1179.38 386.484 1179.27 386.774 1179.27 387.154 cv
f
1185.72 391.764 mo
1189.16 391.764 li
1189.16 392.594 li
1184.53 392.594 li
1184.53 391.764 li
1184.9 391.384 1185.41 390.864 1186.06 390.204 cv
1186.7 389.554 1187.11 389.134 1187.28 388.944 cv
1187.6 388.594 1187.82 388.294 1187.94 388.044 cv
1188.06 387.804 1188.13 387.554 1188.13 387.314 cv
1188.13 386.934 1187.99 386.614 1187.72 386.374 cv
1187.45 386.134 1187.1 386.004 1186.66 386.004 cv
1186.35 386.004 1186.02 386.064 1185.68 386.164 cv
1185.34 386.274 1184.97 386.434 1184.58 386.654 cv
1184.58 385.654 li
1184.98 385.494 1185.35 385.374 1185.69 385.294 cv
1186.03 385.214 1186.35 385.174 1186.64 385.174 cv
1187.39 385.174 1187.99 385.364 1188.44 385.744 cv
1188.89 386.124 1189.12 386.624 1189.12 387.254 cv
1189.12 387.554 1189.06 387.844 1188.95 388.104 cv
1188.84 388.374 1188.64 388.694 1188.34 389.054 cv
1188.26 389.154 1188 389.424 1187.56 389.874 cv
1187.12 390.324 1186.51 390.954 1185.72 391.764 cv
f
gsave
198 378 mo
1425.6 378 li
1425.6 51.8402 li
198 51.8402 li
198 378 li
clp
2 lc
1230.3 378 mo
1230.3 51.84 li
1 /0 /CSD get_res sepcs
.309804 sep
@
grestore
1230.3 378 mo
1230.3 381.5 li
f
1230.3 378 mo
1230.3 381.5 li
@
1227.12 389.134 mo
1226.65 389.134 1226.28 389.264 1226.01 389.514 cv
1225.74 389.764 1225.61 390.104 1225.61 390.544 cv
1225.61 390.984 1225.74 391.334 1226.01 391.584 cv
1226.28 391.834 1226.65 391.954 1227.12 391.954 cv
1227.58 391.954 1227.95 391.834 1228.22 391.574 cv
1228.49 391.324 1228.63 390.984 1228.63 390.544 cv
1228.63 390.104 1228.49 389.764 1228.23 389.514 cv
1227.96 389.264 1227.59 389.134 1227.12 389.134 cv
1226.13 388.714 mo
1225.71 388.614 1225.38 388.414 1225.14 388.124 cv
1224.9 387.834 1224.79 387.484 1224.79 387.064 cv
1224.79 386.484 1224.99 386.024 1225.41 385.684 cv
1225.82 385.344 1226.39 385.174 1227.12 385.174 cv
1227.84 385.174 1228.41 385.344 1228.83 385.684 cv
1229.24 386.024 1229.45 386.484 1229.45 387.064 cv
1229.45 387.484 1229.33 387.834 1229.09 388.124 cv
1228.85 388.414 1228.53 388.614 1228.11 388.714 cv
1228.58 388.824 1228.95 389.044 1229.22 389.364 cv
1229.48 389.684 1229.62 390.084 1229.62 390.544 cv
1229.62 391.254 1229.4 391.794 1228.97 392.164 cv
1228.53 392.544 1227.92 392.724 1227.12 392.724 cv
1226.31 392.724 1225.69 392.544 1225.26 392.164 cv
1224.83 391.794 1224.62 391.254 1224.62 390.544 cv
1224.62 390.084 1224.75 389.684 1225.02 389.364 cv
1225.28 389.044 1225.65 388.824 1226.13 388.714 cv
1225.77 387.154 mo
1225.77 387.534 1225.88 387.834 1226.12 388.044 cv
1226.36 388.254 1226.69 388.354 1227.12 388.354 cv
1227.54 388.354 1227.87 388.254 1228.11 388.044 cv
1228.35 387.834 1228.47 387.534 1228.47 387.154 cv
1228.47 386.774 1228.35 386.484 1228.11 386.274 cv
1227.87 386.064 1227.54 385.954 1227.12 385.954 cv
1226.69 385.954 1226.36 386.064 1226.12 386.274 cv
1225.88 386.484 1225.77 386.774 1225.77 387.154 cv
f
1233.6 388.554 mo
1233.16 388.554 1232.81 388.714 1232.55 389.014 cv
1232.29 389.314 1232.16 389.734 1232.16 390.254 cv
1232.16 390.784 1232.29 391.204 1232.55 391.504 cv
1232.81 391.804 1233.16 391.954 1233.6 391.954 cv
1234.04 391.954 1234.39 391.804 1234.65 391.504 cv
1234.91 391.204 1235.04 390.784 1235.04 390.254 cv
1235.04 389.734 1234.91 389.314 1234.65 389.014 cv
1234.39 388.714 1234.04 388.554 1233.6 388.554 cv
1235.56 385.464 mo
1235.56 386.364 li
1235.31 386.244 1235.06 386.154 1234.81 386.094 cv
1234.55 386.034 1234.3 386.004 1234.06 386.004 cv
1233.4 386.004 1232.9 386.224 1232.56 386.664 cv
1232.22 387.104 1232.02 387.774 1231.98 388.654 cv
1232.17 388.374 1232.41 388.154 1232.7 388.004 cv
1232.99 387.854 1233.31 387.774 1233.66 387.774 cv
1234.39 387.774 1234.97 388.004 1235.39 388.444 cv
1235.81 388.884 1236.03 389.494 1236.03 390.254 cv
1236.03 391.004 1235.8 391.604 1235.36 392.054 cv
1234.92 392.504 1234.33 392.724 1233.6 392.724 cv
1232.76 392.724 1232.11 392.404 1231.67 391.764 cv
1231.22 391.124 1231 390.184 1231 388.954 cv
1231 387.804 1231.27 386.884 1231.82 386.204 cv
1232.36 385.524 1233.1 385.174 1234.02 385.174 cv
1234.26 385.174 1234.51 385.204 1234.77 385.244 cv
1235.02 385.294 1235.28 385.364 1235.56 385.464 cv
f
gsave
198 378 mo
1425.6 378 li
1425.6 51.8402 li
198 51.8402 li
198 378 li
clp
2 lc
1276.8 378 mo
1276.8 51.84 li
1 /0 /CSD get_res sepcs
.309804 sep
@
grestore
1276.8 378 mo
1276.8 381.5 li
f
1276.8 378 mo
1276.8 381.5 li
@
1271.54 392.444 mo
1271.54 391.544 li
1271.78 391.664 1272.03 391.754 1272.29 391.814 cv
1272.54 391.874 1272.79 391.904 1273.04 391.904 cv
1273.68 391.904 1274.18 391.694 1274.52 391.254 cv
1274.86 390.814 1275.06 390.154 1275.12 389.254 cv
1274.92 389.534 1274.68 389.754 1274.4 389.904 cv
1274.11 390.054 1273.79 390.124 1273.44 390.124 cv
1272.7 390.124 1272.12 389.904 1271.7 389.464 cv
1271.28 389.024 1271.07 388.424 1271.07 387.654 cv
1271.07 386.914 1271.29 386.314 1271.73 385.854 cv
1272.17 385.404 1272.76 385.174 1273.5 385.174 cv
1274.34 385.174 1274.99 385.504 1275.43 386.144 cv
1275.87 386.794 1276.1 387.734 1276.1 388.954 cv
1276.1 390.114 1275.82 391.024 1275.28 391.704 cv
1274.73 392.384 1274 392.724 1273.08 392.724 cv
1272.83 392.724 1272.58 392.694 1272.33 392.654 cv
1272.07 392.614 1271.81 392.544 1271.54 392.444 cv
1273.5 389.354 mo
1273.94 389.354 1274.29 389.204 1274.55 388.904 cv
1274.81 388.604 1274.94 388.184 1274.94 387.654 cv
1274.94 387.134 1274.81 386.714 1274.55 386.414 cv
1274.29 386.114 1273.94 385.954 1273.5 385.954 cv
1273.06 385.954 1272.71 386.114 1272.45 386.414 cv
1272.19 386.714 1272.06 387.134 1272.06 387.654 cv
1272.06 388.184 1272.19 388.604 1272.45 388.904 cv
1272.71 389.204 1273.06 389.354 1273.5 389.354 cv
f
1279.98 385.954 mo
1279.47 385.954 1279.09 386.204 1278.83 386.704 cv
1278.57 387.204 1278.45 387.954 1278.45 388.954 cv
1278.45 389.954 1278.57 390.704 1278.83 391.204 cv
1279.09 391.704 1279.47 391.954 1279.98 391.954 cv
1280.49 391.954 1280.87 391.704 1281.13 391.204 cv
1281.38 390.704 1281.51 389.954 1281.51 388.954 cv
1281.51 387.954 1281.38 387.204 1281.13 386.704 cv
1280.87 386.204 1280.49 385.954 1279.98 385.954 cv
1279.98 385.174 mo
1280.79 385.174 1281.41 385.504 1281.85 386.144 cv
1282.28 386.794 1282.5 387.734 1282.5 388.954 cv
1282.5 390.184 1282.28 391.124 1281.85 391.764 cv
1281.41 392.404 1280.79 392.724 1279.98 392.724 cv
1279.16 392.724 1278.53 392.404 1278.1 391.764 cv
1277.67 391.124 1277.46 390.184 1277.46 388.954 cv
1277.46 387.734 1277.67 386.794 1278.1 386.144 cv
1278.53 385.504 1279.16 385.174 1279.98 385.174 cv
f
gsave
198 378 mo
1425.6 378 li
1425.6 51.8402 li
198 51.8402 li
198 378 li
clp
2 lc
1323.3 378 mo
1323.3 51.84 li
1 /0 /CSD get_res sepcs
.309804 sep
@
grestore
1323.3 378 mo
1323.3 381.5 li
f
1323.3 378 mo
1323.3 381.5 li
@
1318.04 392.444 mo
1318.04 391.544 li
1318.28 391.664 1318.53 391.754 1318.79 391.814 cv
1319.04 391.874 1319.29 391.904 1319.54 391.904 cv
1320.18 391.904 1320.68 391.694 1321.02 391.254 cv
1321.36 390.814 1321.56 390.154 1321.62 389.254 cv
1321.42 389.534 1321.18 389.754 1320.9 389.904 cv
1320.61 390.054 1320.29 390.124 1319.94 390.124 cv
1319.2 390.124 1318.62 389.904 1318.2 389.464 cv
1317.78 389.024 1317.57 388.424 1317.57 387.654 cv
1317.57 386.914 1317.79 386.314 1318.23 385.854 cv
1318.67 385.404 1319.26 385.174 1320 385.174 cv
1320.84 385.174 1321.49 385.504 1321.93 386.144 cv
1322.37 386.794 1322.6 387.734 1322.6 388.954 cv
1322.6 390.114 1322.32 391.024 1321.78 391.704 cv
1321.23 392.384 1320.5 392.724 1319.58 392.724 cv
1319.33 392.724 1319.08 392.694 1318.83 392.654 cv
1318.57 392.614 1318.31 392.544 1318.04 392.444 cv
1320 389.354 mo
1320.44 389.354 1320.79 389.204 1321.05 388.904 cv
1321.31 388.604 1321.44 388.184 1321.44 387.654 cv
1321.44 387.134 1321.31 386.714 1321.05 386.414 cv
1320.79 386.114 1320.44 385.954 1320 385.954 cv
1319.56 385.954 1319.21 386.114 1318.95 386.414 cv
1318.69 386.714 1318.56 387.134 1318.56 387.654 cv
1318.56 388.184 1318.69 388.604 1318.95 388.904 cv
1319.21 389.204 1319.56 389.354 1320 389.354 cv
f
1327.08 386.164 mo
1324.59 390.054 li
1327.08 390.054 li
1327.08 386.164 li
1326.82 385.304 mo
1328.06 385.304 li
1328.06 390.054 li
1329.1 390.054 li
1329.1 390.874 li
1328.06 390.874 li
1328.06 392.594 li
1327.08 392.594 li
1327.08 390.874 li
1323.79 390.874 li
1323.79 389.924 li
1326.82 385.304 li
f
gsave
198 378 mo
1425.6 378 li
1425.6 51.8402 li
198 51.8402 li
198 378 li
clp
2 lc
1369.8 378 mo
1369.8 51.84 li
1 /0 /CSD get_res sepcs
.309804 sep
@
grestore
1369.8 378 mo
1369.8 381.5 li
f
1369.8 378 mo
1369.8 381.5 li
@
1364.54 392.444 mo
1364.54 391.544 li
1364.78 391.664 1365.03 391.754 1365.29 391.814 cv
1365.54 391.874 1365.79 391.904 1366.04 391.904 cv
1366.68 391.904 1367.18 391.694 1367.52 391.254 cv
1367.86 390.814 1368.06 390.154 1368.12 389.254 cv
1367.92 389.534 1367.68 389.754 1367.4 389.904 cv
1367.11 390.054 1366.79 390.124 1366.44 390.124 cv
1365.7 390.124 1365.12 389.904 1364.7 389.464 cv
1364.28 389.024 1364.07 388.424 1364.07 387.654 cv
1364.07 386.914 1364.29 386.314 1364.73 385.854 cv
1365.17 385.404 1365.76 385.174 1366.5 385.174 cv
1367.34 385.174 1367.99 385.504 1368.43 386.144 cv
1368.87 386.794 1369.1 387.734 1369.1 388.954 cv
1369.1 390.114 1368.82 391.024 1368.28 391.704 cv
1367.73 392.384 1367 392.724 1366.08 392.724 cv
1365.83 392.724 1365.58 392.694 1365.33 392.654 cv
1365.07 392.614 1364.81 392.544 1364.54 392.444 cv
1366.5 389.354 mo
1366.94 389.354 1367.29 389.204 1367.55 388.904 cv
1367.81 388.604 1367.94 388.184 1367.94 387.654 cv
1367.94 387.134 1367.81 386.714 1367.55 386.414 cv
1367.29 386.114 1366.94 385.954 1366.5 385.954 cv
1366.06 385.954 1365.71 386.114 1365.45 386.414 cv
1365.19 386.714 1365.06 387.134 1365.06 387.654 cv
1365.06 388.184 1365.19 388.604 1365.45 388.904 cv
1365.71 389.204 1366.06 389.354 1366.5 389.354 cv
f
1372.98 389.134 mo
1372.51 389.134 1372.14 389.264 1371.87 389.514 cv
1371.6 389.764 1371.47 390.104 1371.47 390.544 cv
1371.47 390.984 1371.6 391.334 1371.87 391.584 cv
1372.14 391.834 1372.51 391.954 1372.98 391.954 cv
1373.44 391.954 1373.81 391.834 1374.08 391.574 cv
1374.35 391.324 1374.49 390.984 1374.49 390.544 cv
1374.49 390.104 1374.35 389.764 1374.09 389.514 cv
1373.82 389.264 1373.45 389.134 1372.98 389.134 cv
1371.99 388.714 mo
1371.57 388.614 1371.24 388.414 1371 388.124 cv
1370.76 387.834 1370.65 387.484 1370.65 387.064 cv
1370.65 386.484 1370.85 386.024 1371.27 385.684 cv
1371.68 385.344 1372.25 385.174 1372.98 385.174 cv
1373.7 385.174 1374.27 385.344 1374.69 385.684 cv
1375.1 386.024 1375.31 386.484 1375.31 387.064 cv
1375.31 387.484 1375.19 387.834 1374.95 388.124 cv
1374.71 388.414 1374.39 388.614 1373.97 388.714 cv
1374.44 388.824 1374.81 389.044 1375.08 389.364 cv
1375.34 389.684 1375.48 390.084 1375.48 390.544 cv
1375.48 391.254 1375.26 391.794 1374.83 392.164 cv
1374.39 392.544 1373.78 392.724 1372.98 392.724 cv
1372.17 392.724 1371.55 392.544 1371.12 392.164 cv
1370.69 391.794 1370.48 391.254 1370.48 390.544 cv
1370.48 390.084 1370.61 389.684 1370.88 389.364 cv
1371.14 389.044 1371.51 388.824 1371.99 388.714 cv
1371.63 387.154 mo
1371.63 387.534 1371.74 387.834 1371.98 388.044 cv
1372.22 388.254 1372.55 388.354 1372.98 388.354 cv
1373.4 388.354 1373.73 388.254 1373.97 388.044 cv
1374.21 387.834 1374.33 387.534 1374.33 387.154 cv
1374.33 386.774 1374.21 386.484 1373.97 386.274 cv
1373.73 386.064 1373.4 385.954 1372.98 385.954 cv
1372.55 385.954 1372.22 386.064 1371.98 386.274 cv
1371.74 386.484 1371.63 386.774 1371.63 387.154 cv
f
784.233 398.976 mo
785.563 398.976 li
788.793 405.076 li
788.793 398.976 li
789.753 398.976 li
789.753 406.266 li
788.423 406.266 li
785.193 400.166 li
785.193 406.266 li
784.233 406.266 li
784.233 398.976 li
f
791.583 404.106 mo
791.583 400.796 li
792.483 400.796 li
792.483 404.076 li
792.483 404.596 792.583 404.976 792.783 405.236 cv
792.983 405.496 793.283 405.626 793.693 405.626 cv
794.173 405.626 794.563 405.476 794.843 405.166 cv
795.123 404.856 795.263 404.436 795.263 403.896 cv
795.263 400.796 li
796.163 400.796 li
796.163 406.266 li
795.263 406.266 li
795.263 405.426 li
795.043 405.766 794.783 406.006 794.503 406.166 cv
794.213 406.316 793.883 406.396 793.503 406.396 cv
792.873 406.396 792.393 406.206 792.073 405.816 cv
791.743 405.436 791.583 404.866 791.583 404.106 cv
793.843 400.666 mo
793.843 400.666 li
f
802.273 401.846 mo
802.493 401.446 802.763 401.156 803.073 400.956 cv
803.383 400.766 803.753 400.666 804.183 400.666 cv
804.743 400.666 805.183 400.866 805.493 401.266 cv
805.803 401.666 805.963 402.236 805.963 402.966 cv
805.963 406.266 li
805.063 406.266 li
805.063 402.996 li
805.063 402.476 804.963 402.086 804.783 401.826 cv
804.593 401.576 804.313 401.446 803.933 401.446 cv
803.463 401.446 803.093 401.606 802.823 401.916 cv
802.553 402.226 802.423 402.646 802.423 403.176 cv
802.423 406.266 li
801.523 406.266 li
801.523 402.996 li
801.523 402.476 801.423 402.086 801.243 401.826 cv
801.053 401.576 800.763 401.446 800.383 401.446 cv
799.923 401.446 799.553 401.606 799.283 401.916 cv
799.013 402.226 798.883 402.646 798.883 403.176 cv
798.883 406.266 li
797.983 406.266 li
797.983 400.796 li
798.883 400.796 li
798.883 401.646 li
799.083 401.316 799.333 401.066 799.623 400.906 cv
799.903 400.746 800.243 400.666 800.643 400.666 cv
801.043 400.666 801.373 400.766 801.653 400.966 cv
801.933 401.166 802.133 401.466 802.273 401.846 cv
f
809.973 398.976 mo
816.133 398.976 li
816.133 399.806 li
813.543 399.806 li
813.543 406.266 li
812.553 406.266 li
812.553 399.806 li
809.973 399.806 li
809.973 398.976 li
f
819.163 401.426 mo
818.683 401.426 818.303 401.616 818.023 401.996 cv
817.743 402.376 817.603 402.886 817.603 403.536 cv
817.603 404.196 817.733 404.706 818.013 405.086 cv
818.293 405.466 818.673 405.646 819.163 405.646 cv
819.643 405.646 820.023 405.466 820.303 405.086 cv
820.583 404.706 820.723 404.196 820.723 403.536 cv
820.723 402.896 820.583 402.376 820.303 401.996 cv
820.023 401.616 819.643 401.426 819.163 401.426 cv
819.163 400.666 mo
819.943 400.666 820.553 400.926 821.003 401.426 cv
821.443 401.936 821.673 402.636 821.673 403.536 cv
821.673 404.436 821.443 405.136 821.003 405.636 cv
820.553 406.146 819.943 406.396 819.163 406.396 cv
818.373 406.396 817.753 406.146 817.313 405.636 cv
816.873 405.136 816.653 404.436 816.653 403.536 cv
816.653 402.636 816.873 401.936 817.313 401.426 cv
817.753 400.926 818.373 400.666 819.163 400.666 cv
f
824.033 405.446 mo
824.033 408.336 li
823.133 408.336 li
823.133 400.796 li
824.033 400.796 li
824.033 401.626 li
824.213 401.306 824.453 401.066 824.743 400.906 cv
825.033 400.746 825.383 400.666 825.783 400.666 cv
826.443 400.666 826.983 400.936 827.403 401.456 cv
827.813 401.986 828.023 402.676 828.023 403.536 cv
828.023 404.396 827.813 405.096 827.403 405.616 cv
826.983 406.136 826.443 406.396 825.783 406.396 cv
825.383 406.396 825.033 406.316 824.743 406.166 cv
824.453 406.016 824.213 405.776 824.033 405.446 cv
827.093 403.536 mo
827.093 402.876 826.953 402.366 826.683 401.986 cv
826.403 401.606 826.033 401.416 825.563 401.416 cv
825.083 401.416 824.713 401.606 824.443 401.986 cv
824.163 402.366 824.033 402.876 824.033 403.536 cv
824.033 404.196 824.163 404.716 824.443 405.096 cv
824.713 405.476 825.083 405.656 825.563 405.656 cv
826.033 405.656 826.403 405.476 826.683 405.096 cv
826.953 404.716 827.093 404.196 827.093 403.536 cv
f
829.513 400.796 mo
830.413 400.796 li
830.413 406.266 li
829.513 406.266 li
829.513 400.796 li
829.513 398.666 mo
830.413 398.666 li
830.413 399.806 li
829.513 399.806 li
829.513 398.666 li
f
836.233 401.006 mo
836.233 401.846 li
835.973 401.706 835.723 401.606 835.463 401.536 cv
835.203 401.466 834.953 401.426 834.693 401.426 cv
834.113 401.426 833.653 401.616 833.333 401.986 cv
833.013 402.356 832.853 402.876 832.853 403.536 cv
832.853 404.206 833.013 404.726 833.333 405.096 cv
833.653 405.466 834.113 405.646 834.693 405.646 cv
834.953 405.646 835.203 405.616 835.463 405.546 cv
835.723 405.476 835.973 405.366 836.233 405.226 cv
836.233 406.056 li
835.973 406.176 835.713 406.266 835.453 406.316 cv
835.183 406.366 834.893 406.396 834.593 406.396 cv
833.773 406.396 833.113 406.146 832.633 405.626 cv
832.143 405.116 831.903 404.416 831.903 403.536 cv
831.903 402.646 832.143 401.946 832.633 401.436 cv
833.123 400.926 833.793 400.666 834.653 400.666 cv
834.933 400.666 835.203 400.696 835.463 400.756 cv
835.723 400.816 835.983 400.896 836.233 401.006 cv
f
841.283 400.956 mo
841.283 401.806 li
841.023 401.686 840.763 401.586 840.493 401.516 cv
840.213 401.456 839.933 401.416 839.643 401.416 cv
839.193 401.416 838.853 401.486 838.633 401.626 cv
838.413 401.766 838.303 401.966 838.303 402.236 cv
838.303 402.446 838.383 402.606 838.543 402.726 cv
838.703 402.846 839.023 402.966 839.503 403.066 cv
839.813 403.136 li
840.453 403.276 840.903 403.476 841.173 403.716 cv
841.433 403.966 841.573 404.316 841.573 404.756 cv
841.573 405.266 841.373 405.666 840.973 405.956 cv
840.573 406.256 840.013 406.396 839.313 406.396 cv
839.013 406.396 838.713 406.366 838.393 406.316 cv
838.073 406.266 837.743 406.186 837.393 406.066 cv
837.393 405.136 li
837.723 405.316 838.053 405.446 838.373 405.526 cv
838.693 405.616 839.013 405.656 839.333 405.656 cv
839.753 405.656 840.083 405.586 840.313 405.446 cv
840.533 405.306 840.653 405.096 840.653 404.826 cv
840.653 404.586 840.563 404.396 840.403 404.266 cv
840.243 404.136 839.883 404.006 839.323 403.886 cv
839.013 403.816 li
838.453 403.696 838.043 403.516 837.803 403.276 cv
837.553 403.036 837.433 402.706 837.433 402.276 cv
837.433 401.766 837.613 401.366 837.973 401.086 cv
838.333 400.806 838.853 400.666 839.533 400.666 cv
839.863 400.666 840.173 400.696 840.473 400.746 cv
840.763 400.796 841.033 400.866 841.283 400.956 cv
f
gsave
198 378 mo
1425.6 378 li
1425.6 51.8402 li
198 51.8402 li
198 378 li
clp
2 lc
198 376.59 mo
1425.6 376.59 li
1 /0 /CSD get_res sepcs
.309804 sep
@
grestore
198 376.59 mo
194.5 376.59 li
f
198 376.59 mo
194.5 376.59 li
@
165.555 373.747 mo
165.045 373.747 164.665 373.997 164.405 374.497 cv
164.145 374.997 164.025 375.747 164.025 376.747 cv
164.025 377.747 164.145 378.497 164.405 378.997 cv
164.665 379.497 165.045 379.747 165.555 379.747 cv
166.065 379.747 166.445 379.497 166.705 378.997 cv
166.955 378.497 167.085 377.747 167.085 376.747 cv
167.085 375.747 166.955 374.997 166.705 374.497 cv
166.445 373.997 166.065 373.747 165.555 373.747 cv
165.555 372.967 mo
166.365 372.967 166.985 373.297 167.425 373.937 cv
167.855 374.587 168.075 375.527 168.075 376.747 cv
168.075 377.977 167.855 378.917 167.425 379.557 cv
166.985 380.197 166.365 380.517 165.555 380.517 cv
164.735 380.517 164.105 380.197 163.675 379.557 cv
163.245 378.917 163.035 377.977 163.035 376.747 cv
163.035 375.527 163.245 374.587 163.675 373.937 cv
164.105 373.297 164.735 372.967 165.555 372.967 cv
f
169.805 379.147 mo
170.835 379.147 li
170.835 380.387 li
169.805 380.387 li
169.805 379.147 li
f
175.975 376.457 mo
176.445 376.557 176.815 376.767 177.075 377.087 cv
177.335 377.407 177.475 377.807 177.475 378.267 cv
177.475 378.987 177.225 379.547 176.735 379.937 cv
176.235 380.327 175.535 380.517 174.625 380.517 cv
174.315 380.517 173.995 380.487 173.675 380.427 cv
173.355 380.377 173.015 380.287 172.675 380.167 cv
172.675 379.217 li
172.945 379.377 173.245 379.497 173.575 379.577 cv
173.895 379.657 174.235 379.697 174.595 379.697 cv
175.215 379.697 175.685 379.577 176.005 379.337 cv
176.325 379.097 176.495 378.737 176.495 378.267 cv
176.495 377.847 176.345 377.507 176.045 377.267 cv
175.745 377.027 175.325 376.897 174.785 376.897 cv
173.935 376.897 li
173.935 376.087 li
174.825 376.087 li
175.305 376.087 175.675 375.997 175.935 375.797 cv
176.195 375.607 176.325 375.327 176.325 374.957 cv
176.325 374.587 176.185 374.297 175.925 374.097 cv
175.655 373.897 175.275 373.797 174.785 373.797 cv
174.515 373.797 174.225 373.827 173.915 373.887 cv
173.605 373.947 173.265 374.037 172.895 374.157 cv
172.895 373.277 li
173.265 373.177 173.615 373.097 173.945 373.047 cv
174.265 372.997 174.575 372.967 174.875 372.967 cv
175.615 372.967 176.205 373.137 176.645 373.477 cv
177.085 373.817 177.305 374.277 177.305 374.857 cv
177.305 375.257 177.185 375.597 176.955 375.877 cv
176.725 376.157 176.395 376.357 175.975 376.457 cv
f
180.195 379.557 mo
183.635 379.557 li
183.635 380.387 li
179.005 380.387 li
179.005 379.557 li
179.375 379.177 179.885 378.657 180.535 377.997 cv
181.175 377.347 181.585 376.927 181.755 376.737 cv
182.075 376.387 182.295 376.087 182.415 375.837 cv
182.535 375.597 182.605 375.347 182.605 375.107 cv
182.605 374.727 182.465 374.407 182.195 374.167 cv
181.925 373.927 181.575 373.797 181.135 373.797 cv
180.825 373.797 180.495 373.857 180.155 373.957 cv
179.815 374.067 179.445 374.227 179.055 374.447 cv
179.055 373.447 li
179.455 373.287 179.825 373.167 180.165 373.087 cv
180.505 373.007 180.825 372.967 181.115 372.967 cv
181.865 372.967 182.465 373.157 182.915 373.537 cv
183.365 373.917 183.595 374.417 183.595 375.047 cv
183.595 375.347 183.535 375.637 183.425 375.897 cv
183.315 376.167 183.115 376.487 182.815 376.847 cv
182.735 376.947 182.475 377.217 182.035 377.667 cv
181.595 378.117 180.985 378.747 180.195 379.557 cv
f
185.715 373.097 mo
189.585 373.097 li
189.585 373.927 li
186.615 373.927 li
186.615 375.717 li
186.755 375.667 186.905 375.627 187.045 375.607 cv
187.185 375.587 187.335 375.567 187.475 375.567 cv
188.285 375.567 188.925 375.797 189.405 376.237 cv
189.885 376.687 190.125 377.287 190.125 378.047 cv
190.125 378.837 189.875 379.447 189.385 379.877 cv
188.895 380.307 188.205 380.517 187.325 380.517 cv
187.015 380.517 186.705 380.487 186.385 380.447 cv
186.065 380.397 185.745 380.327 185.405 380.217 cv
185.405 379.227 li
185.695 379.387 185.995 379.507 186.315 379.587 cv
186.625 379.667 186.955 379.697 187.305 379.697 cv
187.865 379.697 188.315 379.557 188.645 379.257 cv
188.965 378.957 189.135 378.557 189.135 378.047 cv
189.135 377.547 188.965 377.147 188.645 376.847 cv
188.315 376.547 187.865 376.397 187.305 376.397 cv
187.045 376.397 186.775 376.427 186.515 376.487 cv
186.255 376.547 185.985 376.637 185.715 376.757 cv
185.715 373.097 li
f
gsave
198 378 mo
1425.6 378 li
1425.6 51.8402 li
198 51.8402 li
198 378 li
clp
2 lc
198 331.596 mo
1425.6 331.596 li
1 /0 /CSD get_res sepcs
.309804 sep
@
grestore
198 331.596 mo
194.5 331.596 li
f
198 331.596 mo
194.5 331.596 li
@
165.555 328.753 mo
165.045 328.753 164.665 329.003 164.405 329.503 cv
164.145 330.003 164.025 330.753 164.025 331.753 cv
164.025 332.753 164.145 333.503 164.405 334.003 cv
164.665 334.503 165.045 334.753 165.555 334.753 cv
166.065 334.753 166.445 334.503 166.705 334.003 cv
166.955 333.503 167.085 332.753 167.085 331.753 cv
167.085 330.753 166.955 330.003 166.705 329.503 cv
166.445 329.003 166.065 328.753 165.555 328.753 cv
165.555 327.973 mo
166.365 327.973 166.985 328.303 167.425 328.943 cv
167.855 329.593 168.075 330.533 168.075 331.753 cv
168.075 332.983 167.855 333.923 167.425 334.563 cv
166.985 335.203 166.365 335.523 165.555 335.523 cv
164.735 335.523 164.105 335.203 163.675 334.563 cv
163.245 333.923 163.035 332.983 163.035 331.753 cv
163.035 330.533 163.245 329.593 163.675 328.943 cv
164.105 328.303 164.735 327.973 165.555 327.973 cv
f
169.805 334.153 mo
170.835 334.153 li
170.835 335.393 li
169.805 335.393 li
169.805 334.153 li
f
175.975 331.463 mo
176.445 331.563 176.815 331.773 177.075 332.093 cv
177.335 332.413 177.475 332.813 177.475 333.273 cv
177.475 333.993 177.225 334.553 176.735 334.943 cv
176.235 335.333 175.535 335.523 174.625 335.523 cv
174.315 335.523 173.995 335.493 173.675 335.433 cv
173.355 335.383 173.015 335.293 172.675 335.173 cv
172.675 334.223 li
172.945 334.383 173.245 334.503 173.575 334.583 cv
173.895 334.663 174.235 334.703 174.595 334.703 cv
175.215 334.703 175.685 334.583 176.005 334.343 cv
176.325 334.103 176.495 333.743 176.495 333.273 cv
176.495 332.853 176.345 332.513 176.045 332.273 cv
175.745 332.033 175.325 331.903 174.785 331.903 cv
173.935 331.903 li
173.935 331.093 li
174.825 331.093 li
175.305 331.093 175.675 331.003 175.935 330.803 cv
176.195 330.613 176.325 330.333 176.325 329.963 cv
176.325 329.593 176.185 329.303 175.925 329.103 cv
175.655 328.903 175.275 328.803 174.785 328.803 cv
174.515 328.803 174.225 328.833 173.915 328.893 cv
173.605 328.953 173.265 329.043 172.895 329.163 cv
172.895 328.283 li
173.265 328.183 173.615 328.103 173.945 328.053 cv
174.265 328.003 174.575 327.973 174.875 327.973 cv
175.615 327.973 176.205 328.143 176.645 328.483 cv
177.085 328.823 177.305 329.283 177.305 329.863 cv
177.305 330.263 177.185 330.603 176.955 330.883 cv
176.725 331.163 176.395 331.363 175.975 331.463 cv
f
179.355 328.103 mo
183.225 328.103 li
183.225 328.933 li
180.255 328.933 li
180.255 330.723 li
180.395 330.673 180.545 330.633 180.685 330.613 cv
180.825 330.593 180.975 330.573 181.115 330.573 cv
181.925 330.573 182.565 330.803 183.045 331.243 cv
183.525 331.693 183.765 332.293 183.765 333.053 cv
183.765 333.843 183.515 334.453 183.025 334.883 cv
182.535 335.313 181.845 335.523 180.965 335.523 cv
180.655 335.523 180.345 335.493 180.025 335.453 cv
179.705 335.403 179.385 335.333 179.045 335.223 cv
179.045 334.233 li
179.335 334.393 179.635 334.513 179.955 334.593 cv
180.265 334.673 180.595 334.703 180.945 334.703 cv
181.505 334.703 181.955 334.563 182.285 334.263 cv
182.605 333.963 182.775 333.563 182.775 333.053 cv
182.775 332.553 182.605 332.153 182.285 331.853 cv
181.955 331.553 181.505 331.403 180.945 331.403 cv
180.685 331.403 180.415 331.433 180.155 331.493 cv
179.895 331.553 179.625 331.643 179.355 331.763 cv
179.355 328.103 li
f
187.815 328.753 mo
187.305 328.753 186.925 329.003 186.665 329.503 cv
186.405 330.003 186.285 330.753 186.285 331.753 cv
186.285 332.753 186.405 333.503 186.665 334.003 cv
186.925 334.503 187.305 334.753 187.815 334.753 cv
188.325 334.753 188.705 334.503 188.965 334.003 cv
189.215 333.503 189.345 332.753 189.345 331.753 cv
189.345 330.753 189.215 330.003 188.965 329.503 cv
188.705 329.003 188.325 328.753 187.815 328.753 cv
187.815 327.973 mo
188.625 327.973 189.245 328.303 189.685 328.943 cv
190.115 329.593 190.335 330.533 190.335 331.753 cv
190.335 332.983 190.115 333.923 189.685 334.563 cv
189.245 335.203 188.625 335.523 187.815 335.523 cv
186.995 335.523 186.365 335.203 185.935 334.563 cv
185.505 333.923 185.295 332.983 185.295 331.753 cv
185.295 330.533 185.505 329.593 185.935 328.943 cv
186.365 328.303 186.995 327.973 187.815 327.973 cv
f
gsave
198 378 mo
1425.6 378 li
1425.6 51.8402 li
198 51.8402 li
198 378 li
clp
2 lc
198 286.603 mo
1425.6 286.603 li
1 /0 /CSD get_res sepcs
.309804 sep
@
grestore
198 286.603 mo
194.5 286.603 li
f
198 286.603 mo
194.5 286.603 li
@
165.555 283.759 mo
165.045 283.759 164.665 284.009 164.405 284.509 cv
164.145 285.009 164.025 285.759 164.025 286.759 cv
164.025 287.759 164.145 288.509 164.405 289.009 cv
164.665 289.509 165.045 289.759 165.555 289.759 cv
166.065 289.759 166.445 289.509 166.705 289.009 cv
166.955 288.509 167.085 287.759 167.085 286.759 cv
167.085 285.759 166.955 285.009 166.705 284.509 cv
166.445 284.009 166.065 283.759 165.555 283.759 cv
165.555 282.979 mo
166.365 282.979 166.985 283.309 167.425 283.949 cv
167.855 284.599 168.075 285.539 168.075 286.759 cv
168.075 287.989 167.855 288.929 167.425 289.569 cv
166.985 290.209 166.365 290.529 165.555 290.529 cv
164.735 290.529 164.105 290.209 163.675 289.569 cv
163.245 288.929 163.035 287.989 163.035 286.759 cv
163.035 285.539 163.245 284.599 163.675 283.949 cv
164.105 283.309 164.735 282.979 165.555 282.979 cv
f
169.805 289.159 mo
170.835 289.159 li
170.835 290.399 li
169.805 290.399 li
169.805 289.159 li
f
175.975 286.469 mo
176.445 286.569 176.815 286.779 177.075 287.099 cv
177.335 287.419 177.475 287.819 177.475 288.279 cv
177.475 288.999 177.225 289.559 176.735 289.949 cv
176.235 290.339 175.535 290.529 174.625 290.529 cv
174.315 290.529 173.995 290.499 173.675 290.439 cv
173.355 290.389 173.015 290.299 172.675 290.179 cv
172.675 289.229 li
172.945 289.389 173.245 289.509 173.575 289.589 cv
173.895 289.669 174.235 289.709 174.595 289.709 cv
175.215 289.709 175.685 289.589 176.005 289.349 cv
176.325 289.109 176.495 288.749 176.495 288.279 cv
176.495 287.859 176.345 287.519 176.045 287.279 cv
175.745 287.039 175.325 286.909 174.785 286.909 cv
173.935 286.909 li
173.935 286.099 li
174.825 286.099 li
175.305 286.099 175.675 286.009 175.935 285.809 cv
176.195 285.619 176.325 285.339 176.325 284.969 cv
176.325 284.599 176.185 284.309 175.925 284.109 cv
175.655 283.909 175.275 283.809 174.785 283.809 cv
174.515 283.809 174.225 283.839 173.915 283.899 cv
173.605 283.959 173.265 284.049 172.895 284.169 cv
172.895 283.289 li
173.265 283.189 173.615 283.109 173.945 283.059 cv
174.265 283.009 174.575 282.979 174.875 282.979 cv
175.615 282.979 176.205 283.149 176.645 283.489 cv
177.085 283.829 177.305 284.289 177.305 284.869 cv
177.305 285.269 177.185 285.609 176.955 285.889 cv
176.725 286.169 176.395 286.369 175.975 286.469 cv
f
179.095 283.109 mo
183.785 283.109 li
183.785 283.529 li
181.135 290.399 li
180.105 290.399 li
182.595 283.939 li
179.095 283.939 li
179.095 283.109 li
f
185.715 283.109 mo
189.585 283.109 li
189.585 283.939 li
186.615 283.939 li
186.615 285.729 li
186.755 285.679 186.905 285.639 187.045 285.619 cv
187.185 285.599 187.335 285.579 187.475 285.579 cv
188.285 285.579 188.925 285.809 189.405 286.249 cv
189.885 286.699 190.125 287.299 190.125 288.059 cv
190.125 288.849 189.875 289.459 189.385 289.889 cv
188.895 290.319 188.205 290.529 187.325 290.529 cv
187.015 290.529 186.705 290.499 186.385 290.459 cv
186.065 290.409 185.745 290.339 185.405 290.229 cv
185.405 289.239 li
185.695 289.399 185.995 289.519 186.315 289.599 cv
186.625 289.679 186.955 289.709 187.305 289.709 cv
187.865 289.709 188.315 289.569 188.645 289.269 cv
188.965 288.969 189.135 288.569 189.135 288.059 cv
189.135 287.559 188.965 287.159 188.645 286.859 cv
188.315 286.559 187.865 286.409 187.305 286.409 cv
187.045 286.409 186.775 286.439 186.515 286.499 cv
186.255 286.559 185.985 286.649 185.715 286.769 cv
185.715 283.109 li
f
gsave
198 378 mo
1425.6 378 li
1425.6 51.8402 li
198 51.8402 li
198 378 li
clp
2 lc
198 241.609 mo
1425.6 241.609 li
1 /0 /CSD get_res sepcs
.309804 sep
@
grestore
198 241.609 mo
194.5 241.609 li
f
198 241.609 mo
194.5 241.609 li
@
165.555 238.766 mo
165.045 238.766 164.665 239.016 164.405 239.516 cv
164.145 240.016 164.025 240.766 164.025 241.766 cv
164.025 242.766 164.145 243.516 164.405 244.016 cv
164.665 244.516 165.045 244.766 165.555 244.766 cv
166.065 244.766 166.445 244.516 166.705 244.016 cv
166.955 243.516 167.085 242.766 167.085 241.766 cv
167.085 240.766 166.955 240.016 166.705 239.516 cv
166.445 239.016 166.065 238.766 165.555 238.766 cv
165.555 237.986 mo
166.365 237.986 166.985 238.316 167.425 238.956 cv
167.855 239.606 168.075 240.546 168.075 241.766 cv
168.075 242.996 167.855 243.936 167.425 244.576 cv
166.985 245.216 166.365 245.536 165.555 245.536 cv
164.735 245.536 164.105 245.216 163.675 244.576 cv
163.245 243.936 163.035 242.996 163.035 241.766 cv
163.035 240.546 163.245 239.606 163.675 238.956 cv
164.105 238.316 164.735 237.986 165.555 237.986 cv
f
169.805 244.166 mo
170.835 244.166 li
170.835 245.406 li
169.805 245.406 li
169.805 244.166 li
f
175.695 238.976 mo
173.205 242.866 li
175.695 242.866 li
175.695 238.976 li
175.435 238.116 mo
176.675 238.116 li
176.675 242.866 li
177.715 242.866 li
177.715 243.686 li
176.675 243.686 li
176.675 245.406 li
175.695 245.406 li
175.695 243.686 li
172.405 243.686 li
172.405 242.736 li
175.435 238.116 li
f
181.455 238.766 mo
180.945 238.766 180.565 239.016 180.305 239.516 cv
180.045 240.016 179.925 240.766 179.925 241.766 cv
179.925 242.766 180.045 243.516 180.305 244.016 cv
180.565 244.516 180.945 244.766 181.455 244.766 cv
181.965 244.766 182.345 244.516 182.605 244.016 cv
182.855 243.516 182.985 242.766 182.985 241.766 cv
182.985 240.766 182.855 240.016 182.605 239.516 cv
182.345 239.016 181.965 238.766 181.455 238.766 cv
181.455 237.986 mo
182.265 237.986 182.885 238.316 183.325 238.956 cv
183.755 239.606 183.975 240.546 183.975 241.766 cv
183.975 242.996 183.755 243.936 183.325 244.576 cv
182.885 245.216 182.265 245.536 181.455 245.536 cv
180.635 245.536 180.005 245.216 179.575 244.576 cv
179.145 243.936 178.935 242.996 178.935 241.766 cv
178.935 240.546 179.145 239.606 179.575 238.956 cv
180.005 238.316 180.635 237.986 181.455 237.986 cv
f
187.815 238.766 mo
187.305 238.766 186.925 239.016 186.665 239.516 cv
186.405 240.016 186.285 240.766 186.285 241.766 cv
186.285 242.766 186.405 243.516 186.665 244.016 cv
186.925 244.516 187.305 244.766 187.815 244.766 cv
188.325 244.766 188.705 244.516 188.965 244.016 cv
189.215 243.516 189.345 242.766 189.345 241.766 cv
189.345 240.766 189.215 240.016 188.965 239.516 cv
188.705 239.016 188.325 238.766 187.815 238.766 cv
187.815 237.986 mo
188.625 237.986 189.245 238.316 189.685 238.956 cv
190.115 239.606 190.335 240.546 190.335 241.766 cv
190.335 242.996 190.115 243.936 189.685 244.576 cv
189.245 245.216 188.625 245.536 187.815 245.536 cv
186.995 245.536 186.365 245.216 185.935 244.576 cv
185.505 243.936 185.295 242.996 185.295 241.766 cv
185.295 240.546 185.505 239.606 185.935 238.956 cv
186.365 238.316 186.995 237.986 187.815 237.986 cv
f
gsave
198 378 mo
1425.6 378 li
1425.6 51.8402 li
198 51.8402 li
198 378 li
clp
2 lc
198 196.615 mo
1425.6 196.615 li
1 /0 /CSD get_res sepcs
.309804 sep
@
grestore
198 196.615 mo
194.5 196.615 li
f
198 196.615 mo
194.5 196.615 li
@
165.555 193.772 mo
165.045 193.772 164.665 194.022 164.405 194.522 cv
164.145 195.022 164.025 195.772 164.025 196.772 cv
164.025 197.772 164.145 198.522 164.405 199.022 cv
164.665 199.522 165.045 199.772 165.555 199.772 cv
166.065 199.772 166.445 199.522 166.705 199.022 cv
166.955 198.522 167.085 197.772 167.085 196.772 cv
167.085 195.772 166.955 195.022 166.705 194.522 cv
166.445 194.022 166.065 193.772 165.555 193.772 cv
165.555 192.992 mo
166.365 192.992 166.985 193.322 167.425 193.962 cv
167.855 194.612 168.075 195.552 168.075 196.772 cv
168.075 198.002 167.855 198.942 167.425 199.582 cv
166.985 200.222 166.365 200.542 165.555 200.542 cv
164.735 200.542 164.105 200.222 163.675 199.582 cv
163.245 198.942 163.035 198.002 163.035 196.772 cv
163.035 195.552 163.245 194.612 163.675 193.962 cv
164.105 193.322 164.735 192.992 165.555 192.992 cv
f
169.805 199.172 mo
170.835 199.172 li
170.835 200.412 li
169.805 200.412 li
169.805 199.172 li
f
175.695 193.982 mo
173.205 197.872 li
175.695 197.872 li
175.695 193.982 li
175.435 193.122 mo
176.675 193.122 li
176.675 197.872 li
177.715 197.872 li
177.715 198.692 li
176.675 198.692 li
176.675 200.412 li
175.695 200.412 li
175.695 198.692 li
172.405 198.692 li
172.405 197.742 li
175.435 193.122 li
f
180.195 199.582 mo
183.635 199.582 li
183.635 200.412 li
179.005 200.412 li
179.005 199.582 li
179.375 199.202 179.885 198.682 180.535 198.022 cv
181.175 197.372 181.585 196.952 181.755 196.762 cv
182.075 196.412 182.295 196.112 182.415 195.862 cv
182.535 195.622 182.605 195.372 182.605 195.132 cv
182.605 194.752 182.465 194.432 182.195 194.192 cv
181.925 193.952 181.575 193.822 181.135 193.822 cv
180.825 193.822 180.495 193.882 180.155 193.982 cv
179.815 194.092 179.445 194.252 179.055 194.472 cv
179.055 193.472 li
179.455 193.312 179.825 193.192 180.165 193.112 cv
180.505 193.032 180.825 192.992 181.115 192.992 cv
181.865 192.992 182.465 193.182 182.915 193.562 cv
183.365 193.942 183.595 194.442 183.595 195.072 cv
183.595 195.372 183.535 195.662 183.425 195.922 cv
183.315 196.192 183.115 196.512 182.815 196.872 cv
182.735 196.972 182.475 197.242 182.035 197.692 cv
181.595 198.142 180.985 198.772 180.195 199.582 cv
f
185.715 193.122 mo
189.585 193.122 li
189.585 193.952 li
186.615 193.952 li
186.615 195.742 li
186.755 195.692 186.905 195.652 187.045 195.632 cv
187.185 195.612 187.335 195.592 187.475 195.592 cv
188.285 195.592 188.925 195.822 189.405 196.262 cv
189.885 196.712 190.125 197.312 190.125 198.072 cv
190.125 198.862 189.875 199.472 189.385 199.902 cv
188.895 200.332 188.205 200.542 187.325 200.542 cv
187.015 200.542 186.705 200.512 186.385 200.472 cv
186.065 200.422 185.745 200.352 185.405 200.242 cv
185.405 199.252 li
185.695 199.412 185.995 199.532 186.315 199.612 cv
186.625 199.692 186.955 199.722 187.305 199.722 cv
187.865 199.722 188.315 199.582 188.645 199.282 cv
188.965 198.982 189.135 198.582 189.135 198.072 cv
189.135 197.572 188.965 197.172 188.645 196.872 cv
188.315 196.572 187.865 196.422 187.305 196.422 cv
187.045 196.422 186.775 196.452 186.515 196.512 cv
186.255 196.572 185.985 196.662 185.715 196.782 cv
185.715 193.122 li
f
gsave
198 378 mo
1425.6 378 li
1425.6 51.8402 li
198 51.8402 li
198 378 li
clp
2 lc
198 151.622 mo
1425.6 151.622 li
1 /0 /CSD get_res sepcs
.309804 sep
@
grestore
198 151.622 mo
194.5 151.622 li
f
198 151.622 mo
194.5 151.622 li
@
165.555 148.778 mo
165.045 148.778 164.665 149.028 164.405 149.528 cv
164.145 150.028 164.025 150.778 164.025 151.778 cv
164.025 152.778 164.145 153.528 164.405 154.028 cv
164.665 154.528 165.045 154.778 165.555 154.778 cv
166.065 154.778 166.445 154.528 166.705 154.028 cv
166.955 153.528 167.085 152.778 167.085 151.778 cv
167.085 150.778 166.955 150.028 166.705 149.528 cv
166.445 149.028 166.065 148.778 165.555 148.778 cv
165.555 147.998 mo
166.365 147.998 166.985 148.328 167.425 148.968 cv
167.855 149.618 168.075 150.558 168.075 151.778 cv
168.075 153.008 167.855 153.948 167.425 154.588 cv
166.985 155.228 166.365 155.548 165.555 155.548 cv
164.735 155.548 164.105 155.228 163.675 154.588 cv
163.245 153.948 163.035 153.008 163.035 151.778 cv
163.035 150.558 163.245 149.618 163.675 148.968 cv
164.105 148.328 164.735 147.998 165.555 147.998 cv
f
169.805 154.178 mo
170.835 154.178 li
170.835 155.418 li
169.805 155.418 li
169.805 154.178 li
f
175.695 148.988 mo
173.205 152.878 li
175.695 152.878 li
175.695 148.988 li
175.435 148.128 mo
176.675 148.128 li
176.675 152.878 li
177.715 152.878 li
177.715 153.698 li
176.675 153.698 li
176.675 155.418 li
175.695 155.418 li
175.695 153.698 li
172.405 153.698 li
172.405 152.748 li
175.435 148.128 li
f
179.355 148.128 mo
183.225 148.128 li
183.225 148.958 li
180.255 148.958 li
180.255 150.748 li
180.395 150.698 180.545 150.658 180.685 150.638 cv
180.825 150.618 180.975 150.598 181.115 150.598 cv
181.925 150.598 182.565 150.828 183.045 151.268 cv
183.525 151.718 183.765 152.318 183.765 153.078 cv
183.765 153.868 183.515 154.478 183.025 154.908 cv
182.535 155.338 181.845 155.548 180.965 155.548 cv
180.655 155.548 180.345 155.518 180.025 155.478 cv
179.705 155.428 179.385 155.358 179.045 155.248 cv
179.045 154.258 li
179.335 154.418 179.635 154.538 179.955 154.618 cv
180.265 154.698 180.595 154.728 180.945 154.728 cv
181.505 154.728 181.955 154.588 182.285 154.288 cv
182.605 153.988 182.775 153.588 182.775 153.078 cv
182.775 152.578 182.605 152.178 182.285 151.878 cv
181.955 151.578 181.505 151.428 180.945 151.428 cv
180.685 151.428 180.415 151.458 180.155 151.518 cv
179.895 151.578 179.625 151.668 179.355 151.788 cv
179.355 148.128 li
f
187.815 148.778 mo
187.305 148.778 186.925 149.028 186.665 149.528 cv
186.405 150.028 186.285 150.778 186.285 151.778 cv
186.285 152.778 186.405 153.528 186.665 154.028 cv
186.925 154.528 187.305 154.778 187.815 154.778 cv
188.325 154.778 188.705 154.528 188.965 154.028 cv
189.215 153.528 189.345 152.778 189.345 151.778 cv
189.345 150.778 189.215 150.028 188.965 149.528 cv
188.705 149.028 188.325 148.778 187.815 148.778 cv
187.815 147.998 mo
188.625 147.998 189.245 148.328 189.685 148.968 cv
190.115 149.618 190.335 150.558 190.335 151.778 cv
190.335 153.008 190.115 153.948 189.685 154.588 cv
189.245 155.228 188.625 155.548 187.815 155.548 cv
186.995 155.548 186.365 155.228 185.935 154.588 cv
185.505 153.948 185.295 153.008 185.295 151.778 cv
185.295 150.558 185.505 149.618 185.935 148.968 cv
186.365 148.328 186.995 147.998 187.815 147.998 cv
f
gsave
198 378 mo
1425.6 378 li
1425.6 51.8402 li
198 51.8402 li
198 378 li
clp
2 lc
198 106.628 mo
1425.6 106.628 li
1 /0 /CSD get_res sepcs
.309804 sep
@
grestore
198 106.628 mo
194.5 106.628 li
f
198 106.628 mo
194.5 106.628 li
@
165.555 103.785 mo
165.045 103.785 164.665 104.035 164.405 104.535 cv
164.145 105.035 164.025 105.785 164.025 106.785 cv
164.025 107.785 164.145 108.535 164.405 109.035 cv
164.665 109.535 165.045 109.785 165.555 109.785 cv
166.065 109.785 166.445 109.535 166.705 109.035 cv
166.955 108.535 167.085 107.785 167.085 106.785 cv
167.085 105.785 166.955 105.035 166.705 104.535 cv
166.445 104.035 166.065 103.785 165.555 103.785 cv
165.555 103.005 mo
166.365 103.005 166.985 103.335 167.425 103.975 cv
167.855 104.625 168.075 105.565 168.075 106.785 cv
168.075 108.015 167.855 108.955 167.425 109.595 cv
166.985 110.235 166.365 110.555 165.555 110.555 cv
164.735 110.555 164.105 110.235 163.675 109.595 cv
163.245 108.955 163.035 108.015 163.035 106.785 cv
163.035 105.565 163.245 104.625 163.675 103.975 cv
164.105 103.335 164.735 103.005 165.555 103.005 cv
f
169.805 109.185 mo
170.835 109.185 li
170.835 110.425 li
169.805 110.425 li
169.805 109.185 li
f
175.695 103.995 mo
173.205 107.885 li
175.695 107.885 li
175.695 103.995 li
175.435 103.135 mo
176.675 103.135 li
176.675 107.885 li
177.715 107.885 li
177.715 108.705 li
176.675 108.705 li
176.675 110.425 li
175.695 110.425 li
175.695 108.705 li
172.405 108.705 li
172.405 107.755 li
175.435 103.135 li
f
179.095 103.135 mo
183.785 103.135 li
183.785 103.555 li
181.135 110.425 li
180.105 110.425 li
182.595 103.965 li
179.095 103.965 li
179.095 103.135 li
f
185.715 103.135 mo
189.585 103.135 li
189.585 103.965 li
186.615 103.965 li
186.615 105.755 li
186.755 105.705 186.905 105.665 187.045 105.645 cv
187.185 105.625 187.335 105.605 187.475 105.605 cv
188.285 105.605 188.925 105.835 189.405 106.275 cv
189.885 106.725 190.125 107.325 190.125 108.085 cv
190.125 108.875 189.875 109.485 189.385 109.915 cv
188.895 110.345 188.205 110.555 187.325 110.555 cv
187.015 110.555 186.705 110.525 186.385 110.485 cv
186.065 110.435 185.745 110.365 185.405 110.255 cv
185.405 109.265 li
185.695 109.425 185.995 109.545 186.315 109.625 cv
186.625 109.705 186.955 109.735 187.305 109.735 cv
187.865 109.735 188.315 109.595 188.645 109.295 cv
188.965 108.995 189.135 108.595 189.135 108.085 cv
189.135 107.585 188.965 107.185 188.645 106.885 cv
188.315 106.585 187.865 106.435 187.305 106.435 cv
187.045 106.435 186.775 106.465 186.515 106.525 cv
186.255 106.585 185.985 106.675 185.715 106.795 cv
185.715 103.135 li
f
gsave
198 378 mo
1425.6 378 li
1425.6 51.8402 li
198 51.8402 li
198 378 li
clp
197.6 61.2342 mo
1426 61.2342 li
1426 62.0344 li
197.6 62.0344 li
197.6 61.2342 li
1 /0 /CSD get_res sepcs
.309804 sep
f
grestore
198 61.6342 mo
194.5 61.6342 li
f
198 61.6342 mo
194.5 61.6342 li
@
165.555 58.7911 mo
165.045 58.7911 164.665 59.0411 164.405 59.5411 cv
164.145 60.0411 164.025 60.7911 164.025 61.7911 cv
164.025 62.7911 164.145 63.5411 164.405 64.0411 cv
164.665 64.5411 165.045 64.7911 165.555 64.7911 cv
166.065 64.7911 166.445 64.5411 166.705 64.0411 cv
166.955 63.5411 167.085 62.7911 167.085 61.7911 cv
167.085 60.7911 166.955 60.0411 166.705 59.5411 cv
166.445 59.0411 166.065 58.7911 165.555 58.7911 cv
165.555 58.0111 mo
166.365 58.0111 166.985 58.3411 167.425 58.9811 cv
167.855 59.6311 168.075 60.5711 168.075 61.7911 cv
168.075 63.0211 167.855 63.9611 167.425 64.6011 cv
166.985 65.2411 166.365 65.5611 165.555 65.5611 cv
164.735 65.5611 164.105 65.2411 163.675 64.6011 cv
163.245 63.9611 163.035 63.0211 163.035 61.7911 cv
163.035 60.5711 163.245 59.6311 163.675 58.9811 cv
164.105 58.3411 164.735 58.0111 165.555 58.0111 cv
f
169.805 64.1911 mo
170.835 64.1911 li
170.835 65.4311 li
169.805 65.4311 li
169.805 64.1911 li
f
172.995 58.1411 mo
176.865 58.1411 li
176.865 58.9711 li
173.895 58.9711 li
173.895 60.7611 li
174.035 60.7111 174.185 60.6711 174.325 60.6511 cv
174.465 60.6311 174.615 60.6111 174.755 60.6111 cv
175.565 60.6111 176.205 60.8411 176.685 61.2811 cv
177.165 61.7311 177.405 62.3311 177.405 63.0911 cv
177.405 63.8811 177.155 64.4911 176.665 64.9211 cv
176.175 65.3511 175.485 65.5611 174.605 65.5611 cv
174.295 65.5611 173.985 65.5311 173.665 65.4911 cv
173.345 65.4411 173.025 65.3711 172.685 65.2611 cv
172.685 64.2711 li
172.975 64.4311 173.275 64.5511 173.595 64.6311 cv
173.905 64.7111 174.235 64.7411 174.585 64.7411 cv
175.145 64.7411 175.595 64.6011 175.925 64.3011 cv
176.245 64.0011 176.415 63.6011 176.415 63.0911 cv
176.415 62.5911 176.245 62.1911 175.925 61.8911 cv
175.595 61.5911 175.145 61.4411 174.585 61.4411 cv
174.325 61.4411 174.055 61.4711 173.795 61.5311 cv
173.535 61.5911 173.265 61.6811 172.995 61.8011 cv
172.995 58.1411 li
f
181.455 58.7911 mo
180.945 58.7911 180.565 59.0411 180.305 59.5411 cv
180.045 60.0411 179.925 60.7911 179.925 61.7911 cv
179.925 62.7911 180.045 63.5411 180.305 64.0411 cv
180.565 64.5411 180.945 64.7911 181.455 64.7911 cv
181.965 64.7911 182.345 64.5411 182.605 64.0411 cv
182.855 63.5411 182.985 62.7911 182.985 61.7911 cv
182.985 60.7911 182.855 60.0411 182.605 59.5411 cv
182.345 59.0411 181.965 58.7911 181.455 58.7911 cv
181.455 58.0111 mo
182.265 58.0111 182.885 58.3411 183.325 58.9811 cv
183.755 59.6311 183.975 60.5711 183.975 61.7911 cv
183.975 63.0211 183.755 63.9611 183.325 64.6011 cv
182.885 65.2411 182.265 65.5611 181.455 65.5611 cv
180.635 65.5611 180.005 65.2411 179.575 64.6011 cv
179.145 63.9611 178.935 63.0211 178.935 61.7911 cv
178.935 60.5711 179.145 59.6311 179.575 58.9811 cv
180.005 58.3411 180.635 58.0111 181.455 58.0111 cv
f
187.815 58.7911 mo
187.305 58.7911 186.925 59.0411 186.665 59.5411 cv
186.405 60.0411 186.285 60.7911 186.285 61.7911 cv
186.285 62.7911 186.405 63.5411 186.665 64.0411 cv
186.925 64.5411 187.305 64.7911 187.815 64.7911 cv
188.325 64.7911 188.705 64.5411 188.965 64.0411 cv
189.215 63.5411 189.345 62.7911 189.345 61.7911 cv
189.345 60.7911 189.215 60.0411 188.965 59.5411 cv
188.705 59.0411 188.325 58.7911 187.815 58.7911 cv
187.815 58.0111 mo
188.625 58.0111 189.245 58.3411 189.685 58.9811 cv
190.115 59.6311 190.335 60.5711 190.335 61.7911 cv
190.335 63.0211 190.115 63.9611 189.685 64.6011 cv
189.245 65.2411 188.625 65.5611 187.815 65.5611 cv
186.995 65.5611 186.365 65.2411 185.935 64.6011 cv
185.505 63.9611 185.295 63.0211 185.295 61.7911 cv
185.295 60.5711 185.505 59.6311 185.935 58.9811 cv
186.365 58.3411 186.995 58.0111 187.815 58.0111 cv
f
149.567 250.316 mo
150.607 250.316 li
150.307 250.656 150.077 251.006 149.917 251.386 cv
149.767 251.766 149.687 252.156 149.687 252.576 cv
149.687 253.416 149.947 254.056 150.457 254.496 cv
150.967 254.936 151.697 255.156 152.657 255.156 cv
153.617 255.156 154.357 254.936 154.867 254.496 cv
155.377 254.056 155.627 253.416 155.627 252.576 cv
155.627 252.156 155.557 251.766 155.397 251.386 cv
155.247 251.006 155.017 250.656 154.707 250.316 cv
155.737 250.316 li
155.977 250.666 156.147 251.036 156.257 251.416 cv
156.367 251.796 156.427 252.206 156.427 252.636 cv
156.427 253.736 156.097 254.606 155.427 255.246 cv
154.757 255.886 153.837 256.196 152.657 256.196 cv
151.487 256.196 150.567 255.886 149.887 255.246 cv
149.217 254.606 148.877 253.736 148.877 252.636 cv
148.877 252.196 148.937 251.786 149.047 251.406 cv
149.167 251.026 149.337 250.656 149.567 250.316 cv
f
151.457 246.716 mo
151.457 247.196 151.647 247.576 152.027 247.856 cv
152.407 248.136 152.917 248.276 153.567 248.276 cv
154.227 248.276 154.737 248.146 155.117 247.866 cv
155.497 247.586 155.677 247.206 155.677 246.716 cv
155.677 246.236 155.497 245.856 155.117 245.576 cv
154.737 245.296 154.227 245.156 153.567 245.156 cv
152.927 245.156 152.407 245.296 152.027 245.576 cv
151.647 245.856 151.457 246.236 151.457 246.716 cv
150.697 246.716 mo
150.697 245.936 150.957 245.326 151.457 244.876 cv
151.967 244.436 152.667 244.206 153.567 244.206 cv
154.467 244.206 155.167 244.436 155.667 244.876 cv
156.177 245.326 156.427 245.936 156.427 246.716 cv
156.427 247.506 156.177 248.126 155.667 248.566 cv
155.167 249.006 154.467 249.226 153.567 249.226 cv
152.667 249.226 151.967 249.006 151.457 248.566 cv
150.957 248.126 150.697 247.506 150.697 246.716 cv
f
152.997 238.166 mo
156.297 238.166 li
156.297 239.066 li
153.027 239.066 li
152.507 239.066 152.127 239.176 151.867 239.376 cv
151.607 239.576 151.477 239.876 151.477 240.276 cv
151.477 240.766 151.637 241.146 151.947 241.426 cv
152.257 241.706 152.677 241.846 153.207 241.846 cv
156.297 241.846 li
156.297 242.746 li
148.697 242.746 li
148.697 241.846 li
151.677 241.846 li
151.357 241.636 151.107 241.386 150.947 241.086 cv
150.787 240.796 150.697 240.456 150.697 240.076 cv
150.697 239.456 150.897 238.976 151.287 238.656 cv
151.677 238.336 152.247 238.166 152.997 238.166 cv
f
153.337 231.696 mo
153.777 231.696 li
153.777 235.826 li
154.397 235.786 154.877 235.606 155.197 235.266 cv
155.517 234.936 155.677 234.476 155.677 233.876 cv
155.677 233.536 155.637 233.196 155.557 232.876 cv
155.477 232.556 155.347 232.226 155.167 231.906 cv
156.017 231.906 li
156.157 232.226 156.267 232.556 156.327 232.896 cv
156.387 233.236 156.427 233.586 156.427 233.926 cv
156.427 234.806 156.177 235.496 155.677 236.006 cv
155.177 236.516 154.487 236.766 153.617 236.766 cv
152.727 236.766 152.017 236.526 151.487 236.046 cv
150.967 235.566 150.697 234.906 150.697 234.086 cv
150.697 233.346 150.937 232.766 151.407 232.336 cv
151.887 231.916 152.527 231.696 153.337 231.696 cv
153.077 232.596 mo
152.587 232.606 152.197 232.746 151.897 233.006 cv
151.607 233.276 151.457 233.636 151.457 234.076 cv
151.457 234.576 151.607 234.976 151.887 235.276 cv
152.167 235.576 152.567 235.756 153.077 235.796 cv
153.077 232.596 li
f
151.667 227.056 mo
151.607 227.156 151.567 227.266 151.537 227.386 cv
151.517 227.506 151.497 227.636 151.497 227.776 cv
151.497 228.286 151.667 228.676 151.997 228.946 cv
152.327 229.226 152.797 229.356 153.417 229.356 cv
156.297 229.356 li
156.297 230.256 li
150.827 230.256 li
150.827 229.356 li
151.677 229.356 li
151.347 229.176 151.097 228.926 150.937 228.626 cv
150.777 228.326 150.697 227.956 150.697 227.516 cv
150.707 227.306 li
150.717 227.236 150.727 227.156 150.747 227.056 cv
151.667 227.056 li
f
153.337 221.436 mo
153.777 221.436 li
153.777 225.566 li
154.397 225.526 154.877 225.346 155.197 225.006 cv
155.517 224.676 155.677 224.216 155.677 223.616 cv
155.677 223.276 155.637 222.936 155.557 222.616 cv
155.477 222.296 155.347 221.966 155.167 221.646 cv
156.017 221.646 li
156.157 221.966 156.267 222.296 156.327 222.636 cv
156.387 222.976 156.427 223.326 156.427 223.666 cv
156.427 224.546 156.177 225.236 155.677 225.746 cv
155.177 226.256 154.487 226.506 153.617 226.506 cv
152.727 226.506 152.017 226.266 151.487 225.786 cv
150.967 225.306 150.697 224.646 150.697 223.826 cv
150.697 223.086 150.937 222.506 151.407 222.076 cv
151.887 221.656 152.527 221.436 153.337 221.436 cv
153.077 222.336 mo
152.587 222.346 152.197 222.486 151.897 222.746 cv
151.607 223.016 151.457 223.376 151.457 223.816 cv
151.457 224.316 151.607 224.716 151.887 225.016 cv
152.167 225.316 152.567 225.496 153.077 225.536 cv
153.077 222.336 li
f
152.997 215.416 mo
156.297 215.416 li
156.297 216.316 li
153.027 216.316 li
152.507 216.316 152.127 216.426 151.867 216.626 cv
151.607 216.826 151.477 217.126 151.477 217.526 cv
151.477 218.016 151.637 218.396 151.947 218.676 cv
152.257 218.956 152.677 219.096 153.207 219.096 cv
156.297 219.096 li
156.297 219.996 li
150.827 219.996 li
150.827 219.096 li
151.677 219.096 li
151.357 218.886 151.107 218.636 150.947 218.336 cv
150.787 218.046 150.697 217.706 150.697 217.326 cv
150.697 216.706 150.897 216.226 151.287 215.906 cv
151.677 215.586 152.247 215.416 152.997 215.416 cv
f
151.037 209.686 mo
151.877 209.686 li
151.737 209.946 151.637 210.196 151.567 210.456 cv
151.497 210.716 151.457 210.966 151.457 211.226 cv
151.457 211.806 151.647 212.266 152.017 212.586 cv
152.387 212.906 152.907 213.066 153.567 213.066 cv
154.237 213.066 154.757 212.906 155.127 212.586 cv
155.497 212.266 155.677 211.806 155.677 211.226 cv
155.677 210.966 155.647 210.716 155.577 210.456 cv
155.507 210.196 155.397 209.946 155.257 209.686 cv
156.087 209.686 li
156.207 209.946 156.297 210.206 156.347 210.466 cv
156.397 210.736 156.427 211.026 156.427 211.326 cv
156.427 212.146 156.177 212.806 155.657 213.286 cv
155.147 213.776 154.447 214.016 153.567 214.016 cv
152.677 214.016 151.977 213.776 151.467 213.286 cv
150.957 212.796 150.697 212.126 150.697 211.266 cv
150.697 210.986 150.727 210.716 150.787 210.456 cv
150.847 210.196 150.927 209.936 151.037 209.686 cv
f
153.337 203.446 mo
153.777 203.446 li
153.777 207.576 li
154.397 207.536 154.877 207.356 155.197 207.016 cv
155.517 206.686 155.677 206.226 155.677 205.626 cv
155.677 205.286 155.637 204.946 155.557 204.626 cv
155.477 204.306 155.347 203.976 155.167 203.656 cv
156.017 203.656 li
156.157 203.976 156.267 204.306 156.327 204.646 cv
156.387 204.986 156.427 205.336 156.427 205.676 cv
156.427 206.556 156.177 207.246 155.677 207.756 cv
155.177 208.266 154.487 208.516 153.617 208.516 cv
152.727 208.516 152.017 208.276 151.487 207.796 cv
150.967 207.316 150.697 206.656 150.697 205.836 cv
150.697 205.096 150.937 204.516 151.407 204.086 cv
151.887 203.666 152.527 203.446 153.337 203.446 cv
153.077 204.346 mo
152.587 204.356 152.197 204.496 151.897 204.756 cv
151.607 205.026 151.457 205.386 151.457 205.826 cv
151.457 206.326 151.607 206.726 151.887 207.026 cv
152.167 207.326 152.567 207.506 153.077 207.546 cv
153.077 204.346 li
f
150.987 195.306 mo
151.837 195.306 li
151.717 195.566 151.617 195.826 151.547 196.096 cv
151.487 196.376 151.447 196.656 151.447 196.946 cv
151.447 197.396 151.517 197.736 151.657 197.956 cv
151.797 198.176 151.997 198.286 152.267 198.286 cv
152.477 198.286 152.637 198.206 152.757 198.046 cv
152.877 197.886 152.997 197.566 153.097 197.086 cv
153.167 196.776 li
153.307 196.136 153.507 195.686 153.747 195.416 cv
153.997 195.156 154.347 195.016 154.787 195.016 cv
155.297 195.016 155.697 195.216 155.987 195.616 cv
156.287 196.016 156.427 196.576 156.427 197.276 cv
156.427 197.576 156.397 197.876 156.347 198.196 cv
156.297 198.516 156.217 198.846 156.097 199.196 cv
155.167 199.196 li
155.347 198.866 155.477 198.536 155.557 198.216 cv
155.647 197.896 155.687 197.576 155.687 197.256 cv
155.687 196.836 155.617 196.506 155.477 196.276 cv
155.337 196.056 155.127 195.936 154.857 195.936 cv
154.617 195.936 154.427 196.026 154.297 196.186 cv
154.167 196.346 154.037 196.706 153.917 197.266 cv
153.847 197.576 li
153.727 198.136 153.547 198.546 153.307 198.786 cv
153.067 199.036 152.737 199.156 152.307 199.156 cv
151.797 199.156 151.397 198.976 151.117 198.616 cv
150.837 198.256 150.697 197.736 150.697 197.056 cv
150.697 196.726 150.727 196.416 150.777 196.116 cv
150.827 195.826 150.897 195.556 150.987 195.306 cv
f
151.037 189.646 mo
151.877 189.646 li
151.737 189.906 151.637 190.156 151.567 190.416 cv
151.497 190.676 151.457 190.926 151.457 191.186 cv
151.457 191.766 151.647 192.226 152.017 192.546 cv
152.387 192.866 152.907 193.026 153.567 193.026 cv
154.237 193.026 154.757 192.866 155.127 192.546 cv
155.497 192.226 155.677 191.766 155.677 191.186 cv
155.677 190.926 155.647 190.676 155.577 190.416 cv
155.507 190.156 155.397 189.906 155.257 189.646 cv
156.087 189.646 li
156.207 189.906 156.297 190.166 156.347 190.426 cv
156.397 190.696 156.427 190.986 156.427 191.286 cv
156.427 192.106 156.177 192.766 155.657 193.246 cv
155.147 193.736 154.447 193.976 153.567 193.976 cv
152.677 193.976 151.977 193.736 151.467 193.246 cv
150.957 192.756 150.697 192.086 150.697 191.226 cv
150.697 190.946 150.727 190.676 150.787 190.416 cv
150.847 190.156 150.927 189.896 151.037 189.646 cv
f
151.457 185.966 mo
151.457 186.446 151.647 186.826 152.027 187.106 cv
152.407 187.386 152.917 187.526 153.567 187.526 cv
154.227 187.526 154.737 187.396 155.117 187.116 cv
155.497 186.836 155.677 186.456 155.677 185.966 cv
155.677 185.486 155.497 185.106 155.117 184.826 cv
154.737 184.546 154.227 184.406 153.567 184.406 cv
152.927 184.406 152.407 184.546 152.027 184.826 cv
151.647 185.106 151.457 185.486 151.457 185.966 cv
150.697 185.966 mo
150.697 185.186 150.957 184.576 151.457 184.126 cv
151.967 183.686 152.667 183.456 153.567 183.456 cv
154.467 183.456 155.167 183.686 155.667 184.126 cv
156.177 184.576 156.427 185.186 156.427 185.966 cv
156.427 186.756 156.177 187.376 155.667 187.816 cv
155.167 188.256 154.467 188.476 153.567 188.476 cv
152.667 188.476 151.967 188.256 151.457 187.816 cv
150.957 187.376 150.697 186.756 150.697 185.966 cv
f
151.667 178.796 mo
151.607 178.896 151.567 179.006 151.537 179.126 cv
151.517 179.246 151.497 179.376 151.497 179.516 cv
151.497 180.026 151.667 180.416 151.997 180.686 cv
152.327 180.966 152.797 181.096 153.417 181.096 cv
156.297 181.096 li
156.297 181.996 li
150.827 181.996 li
150.827 181.096 li
151.677 181.096 li
151.347 180.916 151.097 180.666 150.937 180.366 cv
150.777 180.066 150.697 179.696 150.697 179.256 cv
150.707 179.046 li
150.717 178.976 150.727 178.896 150.747 178.796 cv
151.667 178.796 li
f
153.337 173.176 mo
153.777 173.176 li
153.777 177.306 li
154.397 177.266 154.877 177.086 155.197 176.746 cv
155.517 176.416 155.677 175.956 155.677 175.356 cv
155.677 175.016 155.637 174.676 155.557 174.356 cv
155.477 174.036 155.347 173.706 155.167 173.386 cv
156.017 173.386 li
156.157 173.706 156.267 174.036 156.327 174.376 cv
156.387 174.716 156.427 175.066 156.427 175.406 cv
156.427 176.286 156.177 176.976 155.677 177.486 cv
155.177 177.996 154.487 178.246 153.617 178.246 cv
152.727 178.246 152.017 178.006 151.487 177.526 cv
150.967 177.046 150.697 176.386 150.697 175.566 cv
150.697 174.826 150.937 174.246 151.407 173.816 cv
151.887 173.396 152.527 173.176 153.337 173.176 cv
153.077 174.076 mo
152.587 174.086 152.197 174.226 151.897 174.486 cv
151.607 174.756 151.457 175.116 151.457 175.556 cv
151.457 176.056 151.607 176.456 151.887 176.756 cv
152.167 177.056 152.567 177.236 153.077 177.276 cv
153.077 174.076 li
f
1.5 lw
2 lc
253.8 363.175 mo
300.3 146.391 li
346.8 139.24 li
393.3 66.6655 li
439.8 128.119 li
486.3 156.998 li
532.8 122.764 li
579.3 163.415 li
625.8 172.452 li
672.3 163.563 li
718.8 170.916 li
765.3 198.224 li
811.8 173.16 li
858.3 208.093 li
904.8 185.367 li
951.3 194.503 li
997.8 192.162 li
1044.3 207.932 li
1090.8 234.024 li
1137.3 219.3 li
1183.8 210.127 li
1230.3 227.062 li
1276.8 255.538 li
1323.3 220.401 li
1369.8 254.701 li
/1 
[/DeviceCMYK] /CSA add_res
.847868 .481636 .0599985 .000640879 cmyk
@
.8 lw
0 lj
198 378 mo
198 51.84 li
1 /0 /CSD get_res sepcs
1 sep
@
1425.6 378 mo
1425.6 51.84 li
@
198 378 mo
1425.6 378 li
@
198 51.84 mo
1425.6 51.84 li
@
1418.6 74.0118 mo
1381.1 74.0118 li
1380.51 74.0102 1380.16 73.8679 1379.95 73.6585 cv
1379.74 73.4491 1379.6 73.1017 1379.6 72.5117 cv
1379.6 62.0344 li
1420.1 62.0344 li
1420.1 72.5117 li
1420.1 73.1017 1419.96 73.4491 1419.75 73.6585 cv
1419.54 73.8679 1419.19 74.0102 1418.6 74.0118 cv
1420.1 61.2342 mo
1379.6 61.2342 li
1379.6 58.8399 li
1379.6 58.2502 1379.74 57.9029 1379.95 57.6935 cv
1380.16 57.4841 1380.51 57.3418 1381.1 57.3402 cv
1418.6 57.3402 li
1419.19 57.3418 1419.54 57.4841 1419.75 57.6935 cv
1419.96 57.9029 1420.1 58.2502 1420.1 58.8399 cv
1420.1 61.2342 li
0 0 0 0 cmyk
f
1420.1 62.0344 mo
1379.6 62.0344 li
1379.6 61.2342 li
1420.1 61.2342 li
1420.1 62.0344 li
.0523384 .0376287 .0376287 0 cmyk
f
1418.61 75.0119 mo
1418.61 75.0119 1418.6 75.0119 1418.6 75.0119 cv
1381.1 75.0119 li
1381.1 75.0119 1381.09 75.0119 1381.09 75.0119 cv
1380.35 75.0119 1379.7 74.8204 1379.25 74.3655 cv
1378.79 73.9079 1378.6 73.2552 1378.6 72.5117 cv
1378.6 62.0344 li
1379.6 62.0344 li
1379.6 72.5117 li
1379.6 73.1017 1379.74 73.4491 1379.95 73.6585 cv
1380.16 73.8679 1380.51 74.0102 1381.1 74.0118 cv
1381.1 74.0118 li
1418.6 74.0118 li
1419.19 74.0102 1419.54 73.8679 1419.75 73.6585 cv
1419.96 73.4491 1420.1 73.1017 1420.1 72.5117 cv
1420.1 62.0344 li
1421.1 62.0344 li
1421.1 72.5117 li
1421.1 73.2552 1420.91 73.9079 1420.45 74.3655 cv
1420 74.8204 1419.35 75.0119 1418.61 75.0119 cv
1421.1 61.2342 mo
1420.1 61.2342 li
1420.1 58.8399 li
1420.1 58.2502 1419.96 57.9029 1419.75 57.6935 cv
1419.54 57.4841 1419.19 57.3418 1418.6 57.3402 cv
1381.1 57.3402 li
1380.51 57.3418 1380.16 57.4841 1379.95 57.6935 cv
1379.74 57.9029 1379.6 58.2502 1379.6 58.8399 cv
1379.6 61.2342 li
1378.6 61.2342 li
1378.6 58.8399 li
1378.6 58.0964 1378.79 57.4441 1379.25 56.9865 cv
1379.7 56.5316 1380.35 56.3401 1381.09 56.3401 cv
1381.09 56.3401 1381.1 56.3401 1381.1 56.3401 cv
1418.6 56.3401 li
1418.6 56.3401 1418.61 56.3401 1418.61 56.3401 cv
1419.35 56.3401 1420 56.5316 1420.45 56.9865 cv
1420.91 57.4441 1421.1 58.0964 1421.1 58.8399 cv
1421.1 61.2342 li
.15433 .116732 .12192 0 cmyk
f
1421.1 62.0344 mo
1420.1 62.0344 li
1420.1 61.2342 li
1421.1 61.2342 li
1421.1 62.0344 li
1379.6 62.0344 mo
1378.6 62.0344 li
1378.6 61.2342 li
1379.6 61.2342 li
1379.6 62.0344 li
.220584 .17322 .178317 0 cmyk
f
1.5 lw
1 lj
1383.1 64.9337 mo
1403.1 64.9337 li
.847868 .481636 .0599985 .000640879 cmyk
@
1415.98 63.1737 mo
1415.98 64.0137 li
1415.72 63.8737 1415.47 63.7737 1415.21 63.7037 cv
1414.95 63.6337 1414.7 63.5937 1414.44 63.5937 cv
1413.86 63.5937 1413.4 63.7837 1413.08 64.1537 cv
1412.76 64.5237 1412.6 65.0437 1412.6 65.7037 cv
1412.6 66.3737 1412.76 66.8937 1413.08 67.2637 cv
1413.4 67.6337 1413.86 67.8137 1414.44 67.8137 cv
1414.7 67.8137 1414.95 67.7837 1415.21 67.7137 cv
1415.47 67.6437 1415.72 67.5337 1415.98 67.3937 cv
1415.98 68.2237 li
1415.72 68.3438 1415.46 68.4337 1415.2 68.4837 cv
1414.93 68.5337 1414.64 68.5637 1414.34 68.5637 cv
1413.52 68.5637 1412.86 68.3137 1412.38 67.7937 cv
1411.89 67.2837 1411.65 66.5837 1411.65 65.7037 cv
1411.65 64.8137 1411.89 64.1137 1412.38 63.6037 cv
1412.87 63.0937 1413.54 62.8337 1414.4 62.8337 cv
1414.68 62.8337 1414.95 62.8637 1415.21 62.9237 cv
1415.47 62.9837 1415.73 63.0637 1415.98 63.1737 cv
1 /0 /CSD get_res sepcs
1 sep
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
