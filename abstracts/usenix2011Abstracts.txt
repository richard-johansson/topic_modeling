 Web applications often use special string-manipulating sanitizers on untrusted user data, but it is difﬁcult to rea- son manually about the behavior of these functions, lead- ing to errors. For example, the Internet Explorer cross- site scripting ﬁlter turned out to transform some web pages without JavaScript into web pages with valid Java- Script, enabling attacks. In other cases, sanitizers may fail to commute, rendering one order of application safe and the other dangerous.  BEK is a language and system for writing sanitiz- ers that enables precise analysis of sanitizer behavior, including checking idempotence, commutativity, and equivalence. For example, BEK can determine if a tar- get string, such as an entry on the XSS Cheat Sheet, is a valid output of a sanitizer. If so, our analysis synthe- sizes an input string that yields that target. Our language is expressive enough to capture real web sanitizers used in ASP.NET, the Internet Explorer XSS Filter, and the Google AutoEscape framework, which we demonstrate by porting these sanitizers to BEK.  Our analyses use a novel symbolic ﬁnite automata representation to leverage fast satisﬁability modulo the- ories (SMT) solvers and are quick in practice, tak- ing fewer than two seconds to check the commutativ- ity of the entire set of Internet Exporer XSS ﬁlters, between 36 and 39 seconds to check implementations of HTMLEncode against target strings from the XSS Cheat Sheet, and less than ten seconds to check equiv- alence between all pairs of a set of implementations of HTMLEncode. Programs written in BEK can be compiled to traditional languages such as JavaScript and C#, mak- ing it possible for web developers to write sanitizers sup- ported by deep analysis, yet deploy the analyzed code directly to real applications.  1 
 We address the challenge of building secure embedded web interfaces by proposing WebDroid: the ﬁrst frame- work speciﬁcally dedicated to this purpose. Our design extends the Android Framework, and enables developers to create easily secure web interfaces for their applica- tions. To motivate our work, we perform an in-depth study of the security of web interfaces embedded in consumer electronics devices, uncover signiﬁcant vulnerabilities in all the devices examined, and categorize the vulnerabili- ties. We demonstrate how our framework’s security mech- anisms prevent embedded applications from suffering the vulnerabilities exposed by our audit. Finally we evaluate the efﬁciency of our framework in terms of performance and security.  1  
 JavaScript malware-based attacks account for a large fraction of successful mass-scale exploitation happening today. Attackers like JavaScript-based attacks because they can be mounted against an unsuspecting user visit- ing a seemingly innocent web page. While several tech- niques for addressing these types of exploits have been proposed, in-browser adoption has been slow, in part be- cause of the performance overhead these methods incur. In this paper, we propose ZOZZLE, a low-overhead so- lution for detecting and preventing JavaScript malware that is fast enough to be deployed in the browser.  Our approach uses Bayesian classiﬁcation of hier- archical features of the JavaScript abstract syntax tree to identify syntax elements that are highly predictive of malware. Our experimental evaluation shows that ZOZZLE is able to detect JavaScript malware through mostly static code analysis effectively. ZOZZLE has an extremely low false positive rate of 0.0003%, which is less than one in a quarter million. Despite this high ac- curacy, the ZOZZLE classiﬁer is fast, with a throughput of over one megabyte of JavaScript code per second.  1  
APCO Project 25 (“P25”) is a suite of wireless communications protocols used in the US and elsewhere for public safety two-way (voice) radio systems. The protocols include security options in which voice and data traffic can be cryptographically protected from eavesdropping. This paper analyzes the security of P25 systems against both passive and active adversaries. We found a number of protocol, implementation, and user interface weaknesses that routinely leak information to a passive eavesdropper or that permit highly efficient and difficult to detect active attacks. We introduce new selective subframe jamming attacks against P25, in which an active attacker with very modest resources can prevent specific kinds of traffic (such as encrypted messages) from being received, while emitting only a small fraction of the aggregate power of the legitimate transmitter. We also found that even the passive attacks represent a serious practical threat. In a study we conducted over a two year period in several US metropolitan areas, we found that a significant fraction of the “encrypted” P25 tactical radio traffic sent by federal law enforcement surveillance operatives is actually sent in the clear, in spite of their users’ belief that they are encrypted, and often reveals such sensitive data as the names of informants in criminal investigations.
 During the past few years, a vast number of online ﬁle storage services have been introduced. While several of these services provide basic functionality such as upload- ing and retrieving ﬁles by a speciﬁc user, more advanced services offer features such as shared folders, real-time collaboration, minimization of data transfers or unlim- ited storage space. Within this paper we give an overview of existing ﬁle storage services and examine Dropbox, an advanced ﬁle storage solution, in depth. We analyze the Dropbox client software as well as its transmission protocol, show weaknesses and outline possible attack vectors against users. Based on our results we show that Dropbox is used to store copyright-protected ﬁles from a popular ﬁlesharing network. Furthermore Dropbox can be exploited to hide ﬁles in the cloud with unlimited stor- age capacity. We deﬁne this as online slack space. We conclude by discussing security improvements for mod- ern online storage services in general, and Dropbox in particular. To prevent our attacks cloud storage opera- tors should employ data possession proofs on clients, a technique which has been recently discussed only in the context of assessing trust in cloud storage operators.  1  
Modern automobiles are pervasively computerized, and hence potentially vulnerable to attack. However, while previous research has shown that the internal networks within some modern cars are insecure, the associated threat model — requiring prior physical access — has justiﬁably been viewed as unrealistic. Thus, it remains an open question if automobiles can also be susceptible to remote compromise. Our work seeks to put this question to rest by systematically analyzing the external attack surface of a modern automobile. We discover that remote exploitation is feasible via a broad range of attack vectors (including mechanics tools, CD players, Bluetooth and cellular radio), and further, that wireless communications channels allow long distance vehicle control, location tracking, in-cabin audio exﬁltration and theft. Finally, we discuss the structural characteristics of the automotive ecosystem that give rise to such problems and highlight the practical challenges in mitigating them.  
We present DEC0DE, a system for recovering information from phones with unknown storage formats, a critical problem for forensic triage. Because phones have myr- iad custom hardware and software, we examine only the stored data. Via ﬂexible descriptions of typical data struc- tures, and using a classic dynamic programming algo- rithm, we are able to identify call logs and address book entries in phones across varied models and manufactur- ers. We designed DEC0DE by examining the formats of one set of phone models, and we evaluate its performance on other models. Overall, we are able to obtain high performance for these unexamined models: an average recall of 97% and precision of 80% for call logs; and average recall of 93% and precision of 52% for address books. Moreover, at the expense of recall dropping to 14%, we can increase precision of address book recovery to 94% by culling results that don’t match between call logs and address book entries on the same phone.  1  
 Carving is a common technique in digital forensics to recover data from a memory dump of a device. In con- trast to existing approaches, we investigate the carving problem for sets of memory dumps. Such a set can, for instance, be obtained by dumping the memory of a num- ber of smart cards or by regularly dumping the memory of a single smart card during its lifetime. The problem that we deﬁne and investigate is to determine at which location in the dumps certain attributes are stored. By studying the commonalities and dissimilarities of these dumps, one can signiﬁcantly reduce the collection of possible locations for such attributes. We develop algo- rithms that support in this process, implement them in a prototype, and apply this prototype to reverse engineer the data structure of a public transportation card.  1 
 The availability of off-the-shelf exploitation toolkits for compromising hosts, coupled with the rapid rate of exploit discovery and disclosure, has made exploit or vulnerability-based detection far less effective than it once was. For instance, the increasing use of metamor- phic and polymorphic techniques to deploy code injec- tion attacks continues to confound signature-based de- tection techniques. The key to detecting these attacks lies in the ability to discover the presence of the injected code (or, shellcode). One promising technique for do- ing so is to examine data (be that from network streams or buffers of a process) and efﬁciently execute its con- tent to ﬁnd what lurks within. Unfortunately, current ap- proaches for achieving this goal are not robust to eva- sion or scalable, primarily because of their reliance on software-based CPU emulators. In this paper, we ar- gue that the use of software-based emulation techniques are not necessary, and instead propose a new framework that leverages hardware virtualization to better enable the detection of code injection attacks. We also report on our experience using this framework to analyze a corpus of malicious Portable Document Format (PDF) ﬁles and network-based attacks.  1 
 Program state-space exploration is central to software se- curity, testing, and veriﬁcation. In this paper, we propose a novel technique for state-space exploration of software that maintains an ongoing interaction with its environ- ment. Our technique uses a combination of symbolic and concrete execution to build an abstract model of the ana- lyzed application, in the form of a ﬁnite-state automaton, and uses the model to guide further state-space explo- ration. Through exploration, MACE further reﬁnes the abstract model. Using the abstract model as a scaffold, our technique wields more control over the search pro- cess. In particular: (1) shifting search to different parts of the search-space becomes easier, resulting in higher code coverage, and (2) the search is less likely to get stuck in small local state-subspaces (e.g., loops) irrelevant to the application’s interaction with the environment. Prelim- inary experimental results show signiﬁcant increases in the code coverage and exploration depth. Further, our approach found a number of new deep vulnerabilities.  1 
 Access control vulnerabilities, which cause privilege es- calations, are among the most dangerous vulnerabilities in web applications. Unfortunately, due to the difﬁculty in designing and implementing perfect access checks, web applications often fall victim to access control at- tacks. In contrast to traditional injection ﬂaws, access control vulnerabilities are application-speciﬁc, rendering it challenging to obtain precise speciﬁcations for static and runtime enforcement. On one hand, writing speciﬁ- cations manually is tedious and time-consuming, which leads to non-existent, incomplete or erroneous speciﬁca- tions. On the other hand, automatic probabilistic-based speciﬁcation inference is imprecise and computationally expensive in general.  This paper describes the ﬁrst static analysis that au- tomatically detects access control vulnerabilities in web applications. The core of the analysis is a technique that statically infers and enforces implicit access control as- sumptions. Our insight is that source code implicitly doc- uments intended accesses of each role and any successful forced browsing to a privileged page is likely a vulner- ability. Based on this observation, our static analysis constructs sitemaps for different roles in a web applica- tion, compares per-role sitemaps to ﬁnd privileged pages, and checks whether forced browsing is successful for each privileged page. We implemented our analysis and evaluated our tool on several real-world web applications. The evaluation results show that our tool is scalable and detects both known and new access control vulnerabilities with few false positives.  1  
 Web sites routinely incorporate JavaScript programs from several sources into a single page. These sources must be protected from one another, which requires ro- bust sandboxing. The many entry-points of sandboxes and the subtleties of JavaScript demand robust veriﬁca- tion of the actual sandbox source. We use a novel type system for JavaScript to encode and verify sandboxing properties. The resulting veriﬁer is lightweight and efﬁ- cient, and operates on actual source. We demonstrate the effectiveness of our technique by applying it to ADsafe, which revealed several bugs and other weaknesses.  paper.com  Static checks   (cid:2)   Wrap  adnet.com  reject  1 
 Recent years have seen extensive diversiﬁcation of the “underground economy” associated with malware and the subversion of Internet-connected systems. This trend to- wards specialization has compelling forces driving it: mis- creants readily apprehend that tackling the entire value-chain from malware creation to monetization in the presence of ever-evolving countermeasures poses a daunting task requir- ing highly developed skills and resources. As a result, entrepreneurial-minded miscreants have formed pay-per-install (PPI) services—specialized organizations that focus on the in- fection of victims’ systems.  In this work we perform a measurement study of the PPI market by inﬁltrating four PPI services. We develop infrastruc- ture that enables us to interact with PPI services and gather and classify the resulting malware executables distributed by the services. Using our infrastructure, we harvested over a million client executables using vantage points spread across 15 coun- tries. We ﬁnd that of the world’s top 20 most prevalent fami- lies of malware, 12 employ PPI services to buy infections. In addition we analyze the targeting of speciﬁc countries by PPI clients, the repacking of executables to evade detection, and the duration of malware distribution.  1  
 Modern Web services inevitably engender abuse, as at- tackers ﬁnd ways to exploit a service and its user base. However, while defending against such abuse is gener- ally considered a technical endeavor, we argue that there is an increasing role played by human labor markets. Us- ing over seven years of data from the popular crowd- sourcing site Freelancer.com, as well data from our own active job solicitations, we characterize the labor market involved in service abuse. We identify the largest classes of abuse work, including account creation, social net- working link generation and search engine optimization support, and characterize how pricing and demand have evolved in supporting this activity.  
Modern spam is ultimately driven by product sales: goods purchased by customers online. However, while this model is easy to state in the abstract, our under- standing of the concrete business environment—how many orders, of what kind, from which customers, for how much—is poor at best. This situation is unsurpris- ing since such sellers typically operate under question- able legal footing, with “ground truth” data rarely avail- able to the public. However, absent quantiﬁable empiri- cal data, “guesstimates” operate unchecked and can dis- tort both policy making and our choice of appropri- ate interventions. In this paper, we describe two infer- ence techniques for peering inside the business opera- tions of spam-advertised enterprises: purchase pair and basket inference. Using these, we provide informed esti- mates on order volumes, product sales distribution, cus- tomer makeup and total revenues for a range of spam- advertised programs.  1  
  This paper presents the ﬁrst wireless pairing protocol that works in-band, with no pre-shared keys, and protects against MITM attacks. The main innovation is a new key exchange message constructed in a manner that ensures an adversary can neither hide the fact that a message was transmitted, nor alter its payload without being detected. Thus, any attempt by an adversary to interfere with the key exchange translates into the pairing devices detect- ing either invalid pairing messages or an unacceptable increase in the number of such messages. We analytically prove that our design is secure against MITM attacks, and show that our protocol is practical by implementing a prototype using off-the-shelf 802.11 cards. An evaluation of our protocol on two busy wireless networks (MIT’s campus network and a reproduction of the SIGCOMM 2010 network using traces) shows that it can effectively implement key exchange in a real-world environment.  1  
 Current disk encryption techniques store necessary keys in RAM and are therefore susceptible to attacks that tar- get volatile memory, such as Firewire and cold boot at- tacks. We present TRESOR, a Linux kernel patch that implements the AES encryption algorithm and its key management solely on the microprocessor. Instead of us- ing RAM, TRESOR ensures that all encryption states as well as the secret key and any part of it are only stored in processor registers throughout the operational time of the system, thereby substantially increasing its security. Our solution takes advantage of Intel’s new AES-NI in- struction set and exploits the x86 debug registers in a non-standard way, namely as cryptographic key storage. TRESOR is compatible with all modern Linux distribu- tions, and its performance is on a par with that of stan- dard AES implementations.  1  
 Fill-in-the-bubble forms are widely used for surveys, election ballots, and standardized tests. In these and other scenarios, use of the forms comes with an implicit assumption that individuals’ bubble markings them- selves are not identifying. This work challenges this assumption, demonstrating that ﬁll-in-the-bubble forms could convey a respondent’s identity even in the absence of explicit identifying information. We develop methods to capture the unique features of a marked bubble and use machine learning to isolate characteristics indicative of its creator. Using surveys from more than ninety indi- viduals, we apply these techniques and successfully re- identify individuals from markings alone with over 50% accuracy. This bubble-based analysis can have either positive or negative implications depending on the ap- plication. Potential applications range from detection of cheating on standardized tests to attacks on the secrecy of election ballots. To protect against negative conse- quences, we discuss mitigation techniques to remove a bubble’s identifying characteristics. We suggest addi- tional tests using longitudinal data and larger datasets to further explore the potential of our approach in real- world applications.  1  
  We investigate the manipulation of web search re- sults to promote the unauthorized sale of prescription drugs. We focus on search-redirection attacks, where miscreants compromise high-ranking websites and dy- namically redirect trafﬁc to different pharmacies based upon the particular search terms issued by the consumer. We constructed a representative list of 218 drug-related queries and automatically gathered the search results on a daily basis over nine months in 2010-2011. We ﬁnd that about one third of all search results are one of over 7 000 infected hosts triggered to redirect to a few hundred pharmacy websites. Legitimate pharmacies and health resources have been largely crowded out by search-redirection attacks and blog spam. Infections per- sist longest on websites with high PageRank and from .edu domains. 96% of infected domains are connected through trafﬁc redirection chains, and network analysis reveals that a few concentrated communities link many otherwise disparate pharmacies together. We calculate that the conversion rate of web searches into sales lies between 0.3% and 3%, and that more illegal drugs sales are facilitated by search-redirection attacks than by email spam. Finally, we observe that concentration in both the source infections and redirectors presents an opportunity for defenders to disrupt online pharmacy sales.  1  
 We perform an in-depth study of SEO attacks that spread malware by poisoning search results for popular queries. Such attacks, although recent, appear to be both widespread and effective. They compromise legitimate Web sites and generate a large number of fake pages targeting trendy keywords. We ﬁrst dissect one exam- ple attack that affects over 5,000 Web domains and at- tracts over 81,000 user visits. Further, we develop de- SEO, a system that automatically detects these attacks. Using large datasets with hundreds of billions of URLs, deSEO successfully identiﬁes multiple malicious SEO campaigns. In particular, applying the URL signatures derived from deSEO, we ﬁnd 36% of sampled searches to Google and Bing contain at least one malicious link in the top results at the time of our experiment.  1  
 The ﬂuidity of application markets complicate smart- phone security. Although recent efforts have shed light on particular security issues, there remains little insight into broader security characteristics of smartphone ap- plications. This paper seeks to better understand smart- phone application security by studying 1,100 popular free Android applications. We introduce the ded decom- piler, which recovers Android application source code directly from its installation image. We design and exe- cute a horizontal study of smartphone applications based on static analysis of 21 million lines of recovered code. Our analysis uncovered pervasive use/misuse of person- al/phone identiﬁers, and deep penetration of advertising and analytics networks. However, we did not ﬁnd ev- idence of malware or exploitable vulnerabilities in the studied applications. We conclude by considering the implications of these preliminary ﬁndings and offer di- rections for future analysis.  1  
 Modern browsers and smartphone operating systems treat applications as mutually untrusting, potentially ma- licious principals. Applications are (1) isolated ex- cept for explicit IPC or inter-application communica- tion channels and (2) unprivileged by default, requir- ing user permission for additional privileges. Although inter-application communication supports useful collab- it also introduces the risk of permission re- oration, delegation. Permission re-delegation occurs when an ap- plication with permissions performs a privileged task for an application without permissions. This undermines the requirement that the user approve each application’s ac- cess to privileged devices and data. We discuss permis- sion re-delegation and demonstrate its risk by launching real-world attacks on Android system applications; sev- eral of the vulnerabilities have been conﬁrmed as bugs.  We discuss possible ways to address permission re- delegation and present IPC Inspection, a new OS mech- anism for defending against permission re-delegation. IPC Inspection prevents opportunities for permission re- delegation by reducing an application’s permissions after it receives communication from a less privileged applica- tion. We have implemented IPC Inspection for a browser and Android, and we show that it prevents the attacks we found in the Android system applications.  1  
Smartphone apps are often granted to privilege to run with access to the network and sensitive local resources. This makes it diﬃcult for remote endpoints to place any trust in the provenance of network connections originat- ing from a user’s device. Even on the phone, diﬀerent apps with distinct privilege sets can communicate with one another. This can allow one app to trick another into improperly exercising its privileges (resulting in a confused deputy attack). In Quire, we engineered two new security mechanisms into Android to address these issues. First, Quire tracks the call chain of on-device IPCs, allowing an app the choice of operating with the reduced privileges of its callers or exercising its full priv- ilege set by acting explicitly on its own behalf. Second, a lightweight signature scheme allows any app to create a signed statement that can be veriﬁed by any app on the same phone. Both of these mechanisms are reﬂected in network RPCs. This allows remote systems visibility into the state of the phone when the RPC was made. We demonstrate the usefulness of Quire with two example applications: an advertising service that runs advertise- ments separately from their hosting applications, and a remote payment system. We show that Quire’s perfor- mance overhead is minimal.  1  
 Mobile communication is an essential part of our daily lives. Therefore, it needs to be secure and reliable. In this paper, we study the security of feature phones, the most common type of mobile phone in the world. We built a framework to analyze the security of SMS clients of feature phones. The framework is based on a small GSM base station, which is readily available on the market. Through our analysis we discovered vulnerabilities in the feature phone platforms of all major manufacturers. Using these vulnerabilities we designed attacks against end-users as well as mobile operators. The threat is serious since the attacks can be used to prohibit communication on a large scale and can be carried out from anywhere in the world. Through further analysis we determined that such attacks are ampliﬁed by certain conﬁgurations of the mobile network. We conclude our research by providing a set of countermeasures.  1 
 Prior work has shown that return oriented programming (ROP) can be used to bypass W⊕X, a software defense that stops shellcode, by reusing instructions from large libraries such as libc. Modern operating systems have since enabled address randomization (ASLR), which ran- domizes the location of libc, making these techniques unusable in practice. However, modern ASLR implemen- tations leave smaller amounts of executable code unran- domized and it has been unclear whether an attacker can use these small code fragments to construct payloads in the general case.  In this paper, we show defenses as currently deployed can be bypassed with new techniques for automatically creating ROP payloads from small amounts of unran- domized code. We propose using semantic program ver- iﬁcation techniques for identifying the functionality of gadgets, and design a ROP compiler that is resistant to missing gadget types. To demonstrate our techniques, we build Q, an end-to-end system that automatically gener- ates ROP payloads for a given binary. Q can produce payloads for 80% of Linux /usr/bin programs larger than 20KB. We also show that Q can automatically per- form exploit hardening: given an exploit that crashes with defenses on, Q outputs an exploit that bypasses both W⊕X and ASLR. We show that Q can harden nine real- world Linux and Windows exploits, enabling an attacker to automatically bypass defenses as deployed by industry for those programs.  1  
 is commonly The Trusted Platform Module (TPM) thought of as hardware that can increase platform secu- rity. However, it can also be used for malicious pur- poses. The TPM, along with other hardware, can imple- ment a cloaked computation, whose memory state cannot be observed by any other software, including the operat- ing system and hypervisor. We show that malware can use cloaked computations to hide essential secrets (like the target of an attack) from a malware analyst.  We describe and implement a protocol that establishes an encryption key under control of the TPM that can only be used by a speciﬁc infection program. An infected host then proves the legitimacy of this key to a remote mal- ware distribution platform, and receives and executes an encrypted payload in a way that prevents software visibil- ity of the decrypted payload. We detail how malware can beneﬁt from cloaked computations and discuss defenses against our protocol. Hardening legitimate uses of the TPM against attack improves the resilience of our mal- ware, creating a Catch-22 for secure computing technol- ogy.  1 
 In recent years Internet miscreants have been leveraging the DNS to build malicious network infrastructures for malware command and control. In this paper we pro- pose a novel detection system called Kopis for detecting malware-related domain names. Kopis passively moni- tors DNS trafﬁc at the upper levels of the DNS hierar- chy, and is able to accurately detect malware domains by analyzing global DNS query resolution patterns.  Compared to previous DNS reputation systems such as Notos [3] and Exposure [4], which rely on monitor- ing trafﬁc from local recursive DNS servers, Kopis offers a new vantage point and introduces new trafﬁc features speciﬁcally chosen to leverage the global visibility ob- tained by monitoring network trafﬁc at the upper DNS hi- erarchy. Unlike previous work Kopis enables DNS oper- ators to independently (i.e., without the need of data from other networks) detect malware domains within their au- thority, so that action can be taken to stop the abuse. Moreover, unlike previous work, Kopis can detect mal- ware domains even when no IP reputation information is available.  We developed a proof-of-concept version of Kopis, and experimented with eight months of real-world data. Our experimental results show that Kopis can achieve high detection rates (e.g., 98.4%) and low false positive rates (e.g., 0.3% or 0.5%). In addition Kopis is able to detect new malware domains days or even weeks before they appear in public blacklists and security forums, and allowed us to discover the rise of a previously unknown DDoS botnet based in China.  1 
Unsolicited bulk email (spam) is used by cyber- criminals to lure users into scams and to spread mal- ware infections. Most of these unwanted messages are sent by spam botnets, which are networks of compro- mised machines under the control of a single (malicious) entity. Often, these botnets are rented out to particular groups to carry out spam campaigns, in which similar mail messages are sent to a large group of Internet users in a short amount of time. Tracking the bot-infected hosts that participate in spam campaigns, and attributing these hosts to spam botnets that are active on the Internet, are challenging but important tasks. In particular, this infor- mation can improve blacklist-based spam defenses and guide botnet mitigation efforts.  In this paper, we present a novel technique to support the identiﬁcation and tracking of bots that send spam. Our technique takes as input an initial set of IP addresses that are known to be associated with spam bots, and learns their spamming behavior. This initial set is then “magniﬁed” by analyzing large-scale mail delivery logs to identify other hosts on the Internet whose behavior is similar to the behavior previously modeled. We imple- mented our technique in a tool, called BOTMAGNIFIER, and applied it to several data streams related to the deliv- ery of email trafﬁc. Our results show that it is possible to identify and track a substantial number of spam bots by using our magniﬁcation technique. We also perform attribution of the identiﬁed spam hosts and track the evo- lution and activity of well-known spamming botnets over time. Moreover, we show that our results can help to im- prove state-of-the-art spam blacklists.  1  
 A distinguishing characteristic of bots is their ability to establish a command and control (C&C) channel. The typical approach to build detection models for C&C traf- ﬁc and to identify C&C endpoints (IP addresses and do- mains of C&C servers) is to execute a bot in a controlled environment and monitor its outgoing network connec- tions. Using the bot trafﬁc, one can then craft signa- tures that match C&C connections or blacklist the IP addresses or domains that the packets are sent to. Un- fortunately, this process is not as easy as it seems. For example, bots often open a large number of additional connections to legitimate sites (to perform click fraud or query for the current time), and bots can deliberately produce “noise” – bogus connections that make the anal- ysis more difﬁcult. Thus, before one can build a model for C&C trafﬁc or blacklist IP addresses and domains, one ﬁrst has to pick the C&C connections among all the network trafﬁc that a bot produces.  In this paper, we present JACKSTRAWS, a system that accurately identiﬁes C&C connections. To this end, we leverage host-based information that provides insights into which data is sent over each network connection as well as the ways in which a bot processes the informa- tion that it receives. More precisely, we associate with each network connection a behavior graph that captures the system calls that lead to this connection, as well as the system calls that operate on data that is returned. By using machine learning techniques and a training set of graphs that are associated with known C&C con- nections, we automatically extract and generalize graph templates that capture the core of different types of C&C activity. Later, we use these C&C templates to match against behavior graphs produced by other bots. Our results show that JACKSTRAWS can accurately detect C&C connections, even for novel bot families that were not used for template generation.  
 In this paper, we present Telex, a new approach to resisting state-level Internet censorship. Rather than at- tempting to win the cat-and-mouse game of ﬁnding open proxies, we leverage censors’ unwillingness to completely block day-to-day Internet access. In effect, Telex converts innocuous, unblocked websites into proxies, without their explicit collaboration. We envision that friendly ISPs would deploy Telex stations on paths between censors’ networks and popular, uncensored Internet destinations. Telex stations would monitor seemingly innocuous ﬂows for a special “tag” and transparently divert them to a for- bidden website or service instead. We propose a new cryptographic scheme based on elliptic curves for tagging TLS handshakes such that the tag is visible to a Telex station but not to a censor. In addition, we use our tagging scheme to build a protocol that allows clients to connect to Telex stations while resisting both passive and active at- tacks. We also present a proof-of-concept implementation that demonstrates the feasibility of our system.  1  
 Existing anonymous communication systems like Tor do not scale well as they require all users to maintain up-to- date information about all available Tor relays in the sys- tem. Current proposals for scaling anonymous commu- nication advocate a peer-to-peer (P2P) approach. While the P2P paradigm scales to millions of nodes, it pro- vides new opportunities to compromise anonymity. In this paper, we step away from the P2P paradigm and ad- vocate a client-server approach to scalable anonymity. We propose PIR-Tor, an architecture for the Tor net- work in which users obtain information about only a few onion routers using private information retrieval tech- niques. Obtaining information about only a few onion routers is the key to the scalability of our approach, while the use of private retrieval information techniques helps preserve client anonymity. The security of our architec- ture depends on the security of PIR schemes which are well understood and relatively easy to analyze, as op- posed to peer-to-peer designs that require analyzing ex- tremely complex and dynamic systems. In particular, we demonstrate that reasonable parameters of our architec- ture provide equivalent security to that of the Tor net- work. Moreover, our experimental results show that the overhead of PIR-Tor is manageable even when the Tor network scales by two orders of magnitude.  1  
In recent years, privacy-preserving toll collection has been proposed as a way to resolve the tension between the de- sire for sophisticated road pricing schemes and drivers’ interest in maintaining the privacy of their driving pat- terns. Two recent systems in particular, VPriv (USENIX Security 2009) and PrETP (USENIX Security 2010), use modern cryptographic primitives to solve this problem. In order to keep drivers honest in paying for their usage of the roads, both systems rely on unpredictable spot checks (e.g., by hidden roadside cameras or roaming police vehi- cles) to catch potentially cheating drivers.  In this paper we identify large-scale driver collusion as a threat to the necessary unpredictability of these spot checks. Most directly, the VPriv and PrETP audit pro- tocols both reveal to drivers the locations of spot-check cameras — information that colluding drivers can then use to avoid paying road fees. We describe Milo, a new privacy-preserving toll collection system based on PrETP, whose audit protocol does not have this information leak, even when drivers misbehave and collude. We then evalu- ate the additional cost of Milo and ﬁnd that, when com- pared to naïve methods to protect against cheating drivers, Milo offers a signiﬁcantly more cost-effective approach.  
 Anonymizing private data before release is not enough to reliably protect privacy, as Netﬂix and AOL have learned to their cost. Recent research on differential privacy opens a way to obtain robust, provable privacy guarantees, and systems like PINQ and Airavat now of- fer convenient frameworks for processing arbitrary user- speciﬁed queries in a differentially private way. How- ever, these systems are vulnerable to a variety of covert- channel attacks that can be exploited by an adversarial querier.  We describe several different kinds of attacks, all fea- sible in PINQ and some in Airavat. We discuss the space of possible countermeasures, and we present a detailed design for one speciﬁc solution, based on a new primi- tive we call predictable transactions and a simple differ- entially private programming language. Our evaluation, which relies on a proof-of-concept implementation based on the Caml Light runtime, shows that our design is ef- fective against remotely exploitable covert channels, at the expense of a higher query completion time.  1 
Attribute-based encryption (ABE) is a new vision for public key encryption that allows users to encrypt and decrypt messages based on user attributes. For example, a user can create a ciphertext that can be decrypted only by other users with attributes satisfying (“Faculty” OR (“PhD Student” AND “Quals Completed”)). Given its expressiveness, ABE is currently being considered for many cloud storage and computing applications. However, one of the main efficiency drawbacks of ABE is that the size of the ciphertext and the time required to decrypt it grows with the complexity of the access formula. In this work, we propose a new paradigm for ABE that largely eliminates this overhead for users. Suppose that ABE ciphertexts are stored in the cloud. We show how a user can provide the cloud with a single transformation key that allows the cloud to translate any ABE ciphertext satisfied by that user’s attributes into a (constant-size) El Gamal-style ciphertext, without the cloud being able to read any part of the user’s messages. To precisely define and demonstrate the advantages of this approach, we provide new security definitions for both CPA and replayable CCA security with outsourcing, several new constructions, an implementation of our algorithms and detailed performance measurements. In a typical configuration, the user saves significantly on both bandwidth and decryption time, without increasing the number of transmissions.
 Secure two-party computation enables two parties to evaluate a function cooperatively without revealing to ei- ther party anything beyond the function’s output. The garbled-circuit technique, a generic approach to secure two-party computation for semi-honest participants, was developed by Yao in the 1980s, but has been viewed as being of limited practical signiﬁcance due to its in- efﬁciency. We demonstrate several techniques for im- proving the running time and memory requirements of the garbled-circuit technique, resulting in an implemen- tation of generic secure two-party computation that is signiﬁcantly faster than any previously reported while also scaling to arbitrarily large circuits. We validate our approach by demonstrating secure computation of cir- cuits with over 109 gates at a rate of roughly 10 µs per garbled gate, and showing order-of-magnitude improve- ments over the best previous privacy-preserving proto- cols for computing Hamming distance, Levenshtein dis- tance, Smith-Waterman genome alignment, and AES.  1  
—  In  this  paper  we  describe  three  separate  Media  Access  Control  (MAC)  address  spoofing  attacks  that,  when  deployed  in  specific  yet  common  layer  2  network  topologies,  circumvent Cisco’s port security. We show first that, with full  the  vendor  recommended  knowledge  of  implementation  of  port  security  ineffective  at  preventing all three of these attacks, and actually decreases the  difficulty of performing two of them.  Next, we re-examine the  attacks  under  less  ideal  conditions  and  demonstrate  that  they  are  feasible.  Finally,  we  describe  mitigation  strategies  that  reduce  the  likelihood  of  success,  but  we  argue  that  the  use  of  port  security  as  a  preventative  measure  is  difficult  and  may  require  security  and  performance,  flexibility, administrative cost, and ease of use.   tradeoffs  between   is  both   Keywords-port   security;   spoofing  attacks;  mitigation   stratigies   I.    
 We show that fragmented IPv4 and IPv6 trafﬁc is vul- nerable to DoS, interception and modiﬁcation attacks by a blind (spooﬁng-only) attacker. We demonstrated a weak attacker causing over 94% loss rate and intercept- ing more than 80% of data between peers. All attacks are practical, and validated experimentally on popular in- dustrial and open-source products, with realistic network setups (involving NAT or tunneling). The interception attack requires a zombie behind the same NAT or tunnel- gateway as the victim destination; the other attacks only require a puppet (adversarial applet/script in sandbox).  The complexity of our attacks depends on the pre- dictability of the IP Identiﬁer (ID) ﬁeld and are simpler for implementations, e.g. Windows, which use globally- incrementing IP IDs. Most of our effort went into extend- ing the attacks for implementations, e.g. Linux, which use per-destination-incrementing IP IDs.  1  
 IOS ﬁrmware diversity, the unintended consequence of a complex ﬁrmware compilation process, has historically made reliable exploitation of Cisco routers diﬃcult. With approx- imately 300,000 unique IOS images in existence, a new class of version-agnostic shellcode is needed in order to make the large-scale exploitation of Cisco IOS possible. We show that such attacks are now feasible by demonstrating two diﬀerent reliable shellcodes which will operate correctly over many Cisco hardware platforms and all known IOS versions. We propose a novel two-phase attack strategy against Cisco routers and the use of oﬄine analysis of existing IOS im- ages to defeat IOS ﬁrmware diversity. Furthermore, we dis- cuss a new IOS rootkit which hijacks all interrupt service routines within the router and its ability to use intercept and modify process-switched packets just before they are scheduled for transmission. This ability allows the attacker to use the payload of innocuous packets, like ICMP, as a covert command and control channel. The same mechanism can be used to stealthily exﬁltrate data out of the router, using response packets generated by the router itself as the vehicle. We present the implementation and quantitative re- liability measurements by testing both shellcode algorithms against a large collection of IOS images. As our experi- mental results show, the techniques proposed in this paper can reliably inject command and control capabilities into arbitrary IOS images in a version-agnostic manner. We be- lieve that the technique presented in this paper overcomes an important hurdle in the large-scale, reliable rootkit exe- cution within Cisco IOS. Thus, eﬀective host-based defense for such routers is imperative for maintaining the integrity of our global communication infrastructures.  ∗Video demos of both IOS shellcodes and our stealthy exﬁl- tration module can be found at [7].  
 SkyNET is a stealth network that connects hosts to a bot- master through a mobile drone. The network is com- prised of machines on home Wi-Fi networks in a prox- imal urban area, and one or more autonomous attack drones. The SkyNET is used by a botmaster to command their botnet(s) without using the Internet. The drones are programmed to scour an urban area and compromise wireless networks. Once compromised, the drone attacks the local hosts. When a host is compromised it joins both the Internet-facing botnet, and the sun-facing SkyNET. Subsequent drone ﬂights are used to issue command and control without ever linking the botmaster to the botnet via the Internet. Reverse engineering the botnet, or enu- merating the bots, does not reveal the identity of the bot- master. An analyst is forced to observe the autonomous attack drone to bridge the command and control gap. In this paper we present a working example, SkyNET com- plete with a prototype attack drone, discuss the reality of using such a command and control method, and provide insight on how to prevent against such attacks.  1 
 Pixelization is a technique to make parts of an image impossible to discern by the human eye by artiﬁcially decreasing the image resolution. Pixelization, as other forms of image censorship, is effective at hiding parts of an image that might be offensive to the viewer. However, pixelization is also often used also to achieve anonymity, for example to make the features of a person’s face un- recognizable or the deﬁning characteristics of cars and building unidentiﬁable. This use of pixelization is some- what effective in the case of still images, even though it is open to dictionary attacks. However, when used in videos, pixelization might be vulnerable to full recon- struction attacks.  the In this paper, we describe an attack against anonymization of videos through pixelization. We de- velop an approach that, given a pixelized video, recon- structs the image being pixelized so that the human eye can clearly identify the object being protected. We im- plemented our approach and tested it against both arti- ﬁcial and real-world videos. The results of our experi- ments show that, in many cases, video pixelization does not provide sufﬁcient guarantees of anonymity.  1  
 In this paper, we examine the potential of using a ther- mal camera to recover codes typed into keypads in a va- riety of scenarios. This attack has the advantage over using a conventional camera that the codes do not need to be captured while they are being typed and can in- stead be recovered for a short period afterwards. To get the broadest sense of how effective such an attack might be, we consider a number of variables: the material of the keypad, the user entering the code, the distance from the camera to the keypad, and the possible methods used to analyze the data. First, we present code recovery re- sults from human review of our test data set; this pro- vides us with a baseline for the overall effectiveness of thermal camera-based attacks. Second, using techniques from computer vision we automatically extract the code from raw camera data, thus demonstrating that this attack has the potential to scale well in practice.  As we will see, both human and automated attacks are by and large successful in recovering the keys present in the code, even a full minute after they have been pressed; both methods are also able to determine the exact code (i.e., including the order in which the keys were pressed) for a smaller fraction of codes. Even without ordering, however, the search space of possible keys is still vastly reduced by knowing the keys pressed; for example, the search space is reduced from 10,000 possible codes to approximately 24 for a 4-digit code. In large-scale at- tacks involving many unique codes, such as on ATM PINs, our success rate indicates that an adversary can correctly recover enough codes to make such an attack economically viable.  1  
 Here we present methods for injecting raw frames at Layer 1 from within upper-layer protocols by abuse of in-band signaling mechanisms common to most digital radio protocols. This packet piggy-backing technique al- lows attackers to hide malicious packets inside packets that are permitted on the network. When these carefully crafted Packets-in-Packets (PIPs) traverse a wireless net- work, a bit error in the outer frame will cause the inner frame to be interpreted instead. This allows an attacker to evade ﬁrewalls, intrusion detection/prevention sys- tems, user-land networking restrictions, and other such defenses. As packets are constructed using interior ﬁelds of higher networking layers, the attacker only needs the authority to send cleartext data over the air, even if it is wrapped within several networking layers.  This paper includes tested examples of raw frame in- jection for IEEE 802.15.4 and 2-FSK radios. Addi- tionally, implementation complications are described for 802.11 and a variety of other modern radios. Finally, we present suggestions for how this technique might be extended from wireless radio protocols to Ethernet and other wired links.  1  
Power management has become increasingly important for server systems. Numerous techniques have been pro- posed and developed to optimize server power consump- tion and achieve energy proportional computing. How- ever, the security perspective of server power manage- ment has not yet been studied. In this paper, we investi- gate energy attacks, a new type of malicious exploits on server systems. Targeted solely at abusing server power consumption, energy attacks exhibit very different at- tacking behaviors and cause very different victim symp- toms from conventional cyberspace attacks. First, we unveil that today’s server systems with improved power saving technologies are more vulnerable to energy at- tacks. Then, we demonstrate a realistic energy attack on a standalone server system in three steps: (1) by proﬁl- ing energy cost of an open Web service under different operation conditions, we identify the vulnerabilities that subject a server to energy attacks; (2) exploiting the dis- covered attack vectors, we design an energy attack that can be launched anonymously from remote; and (3) we execute the attack and measure the extent of its damage in a systematic manner. Finally, we highlight the chal- lenges in defending against energy attacks.  1 
Today, several actors within the Internet’s burgeoning underground economy specialize in providing services to like-minded criminals. At the same time, gray and white markets exist for services on the Internet providing reasonably similar products. In this paper we explore a hypothetical arbitrage between these two markets by pur- chasing “Human Intelligence” on Amazon’s Mechanical Turk service, determining the vulnerability of and cost to compromise the computers being used by the humans to provide this service, and estimating the underground value of the computers which are vulnerable to exploita- tion. We show that it is economically feasible for an attacker to purchase access to high value hosts via Me- chanical Turk, compromise the subset with unpatched, vulnerable browser plugins, and sell access to these hosts via Pay-Per-Install programs for a tidy proﬁt. We also present supplementary statistics gathered regarding Me- chanical Turk workers’ browser security, antivirus usage, and willingness to run arbitrary programs in exchange for a small monetary reward.  
 In the past few years, mobile devices (smartphones, PDAs) have seen both their computational power and their data connectivity rise to a level nearly equivalent to that available on small desktop computers, while be- coming ubiquitous. On the downside, these mobile de- vices are now an extremely attractive target for large- scale security attacks. Mobile device middleware is thus experiencing an increased focus on attempts to mitigate potential security compromises. In particular, Android incorporates by design many well-known security fea- tures such as privilege separation. The Android security model also creates several new security sensitive con- cepts such as Android’s application permission system and the unmoderated Android market. In this paper we look to Android as a speciﬁc instance of mobile com- puting. We ﬁrst discuss the Android security model and some potential weaknesses of the model. We then pro- vide a taxonomy of attacks to the platform demonstrated by real attacks that in the end guarantee privileged access to the device. Where possible, we also propose mitiga- tions for the identiﬁed vulnerabilities.  
 The study of vulnerabilities and exploitation is one of ﬁnding mechanisms affecting the ﬂow of computation and of ﬁnding new means to perform unexpected com- putation. In this paper we show the extent to which ex- ception handling mechanisms as implemented and used by gcc can be used to control program execution. We show that the data structures used to store exception han- dling information on UNIX-like systems actually contain Turing-complete bytecode, which is executed by a vir- tual machine during the course of exception unwinding and handling. We discuss how a malicious attacker could gain control over these structures and how such an at- tacker could utilize them once control has been achieved.  1  
 • Double free, when an object is deleted multiple  Heap-based attacks depend on a combination of mem- ory management errors and an exploitable memory allo- cator. Many allocators include ad hoc countermeasures against particular exploits, but their effectiveness against future exploits has been uncertain.  This paper presents the ﬁrst formal treatment of the impact of allocator design on security. It analyzes a range of widely-deployed memory allocators, includ- ing those used by Windows, Linux, FreeBSD, and OpenBSD, and shows that they remain vulnerable to at- tack. It then presents DieHarder, a new allocator whose design was guided by this analysis. DieHarder provides the highest degree of security from heap-based attacks of any practical allocator of which we are aware, while imposing modest performance overhead. In particular, the Firefox web browser runs as fast with DieHarder as with the Linux allocator.  1  
Rigorous identiﬁcation of vulnerabilities in program code is a key to implementing and operating secure sys- tems. Unfortunately, only some types of vulnerabilities can be detected automatically. While techniques from software testing can accelerate the search for security ﬂaws, in the general case discovery of vulnerabilities is a tedious process that requires signiﬁcant expertise and time. In this paper, we propose a method for assisted discovery of vulnerabilities in source code. Our method proceeds by embedding code in a vector space and auto- matically determining API usage patterns using machine learning. Starting from a known vulnerability, these patterns can be exploited to guide the auditing of code and to identify potentially vulnerable code with similar characteristics—a process we refer to as vulnerability ex- trapolation. We empirically demonstrate the capabilities of our method in different experiments. In a case study with the library FFmpeg, we are able to narrow the search for interesting code from 6,778 to 20 functions and dis- cover two security ﬂaws, one being a known ﬂaw and the other constituting a zero-day vulnerability.  1 
iClass is one of the most widely used contactless smartcards on the market. It is used extensively in access control and payment systems all over the world. This paper studies the built-in key diversiﬁcation algorithm of iClass. We reverse engineered this key diversiﬁcation algorithm by inspecting the update card key messages sent by an iClass reader to the card. This algorithm uses a combination of single DES and a proprietary key fortiﬁcation function called ‘hash0’. We show that the function hash0 is not one-way nor collision resistant. Moreover, we give the inverse function hash0−1 that outputs a modest amount (on average 4) of candid- ate pre-images. Finally, we show that recovering an iClass master key is not harder than a chosen plaintext attack on single DES. Considering that there is only one master key in all iClass readers, this enables an attacker to clone cards and gain access to potentially any system using iClass.  1  
