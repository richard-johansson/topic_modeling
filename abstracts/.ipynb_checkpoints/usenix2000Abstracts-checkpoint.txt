Several  security protocols (PGP, PEM, MOSS, S/MIME, PKCS#7, CMS, etc.)  have  been developed to proivide confidentialtiy and authentication of  electronic mail.  These protocols are widely used and trusted for  private communication over the Internet.  We point out a potentially  serous security hole in these protocols: any encrypted e-mail can be  decrypted using a one-message, adaptive chosen-ciphertext attack which  exploits the structure of the block cipher chaining models used.   Although such attacks seem to be of primarily theoretical interest, we  argue that they are feasible in the networked systems in which these  e-mail protocols are used.  We suggest several solutions to protect  against this class of attack.
The market for Personal Digital Assistants (PDAs) is growing at a rapid  pace. An increasing number of products, such as the PalmPilot, are adding wireless communications capabilities. PDA users are now able to send and receive email just as they would from their networked desktop machines.  Because of the inherent insecurity of wireless environments, a system is  needed for secure email communications. The requirements for the security  system will likely be influenced by the constraints of the PDA, including  limited memory, limited processing power, limited bandwidth, and a limited  user interface.   This paper describes our experience with porting PGP to the Research in Motion (RIM) two-way pager, and incorporating elliptic curve cryptography into PGP's suite of public-key ciphers. Our main conclusion is that PGP is a viable solution for providing secure and interoperable email communications between constrained wireless devices and desktop machines.
We describe Shibboleth, a program to manage private Internet mailing lists. Differing from other mailing list managers, Shibboleth manages lists or groups of lists that are closed, or have membership by invitation only. So instead of focusing on automating the processes of subscribing and unsubscribing readers, we include features like SMTP forgery detection, prevention of outsiders' ability to harvest usable email addresses from mailing list archives, and support for cryptographic strength user authentication and nonrepudiation.
Finding the  source of forged Internet Protocol (IP) datagrams in a large,  high-speed network is difficult due to the design of the IP protocol and  the lack of sufficient capability in most high-speed, high capacity  router implementations.  Typically, not enough of the routers in such a  network are capable of performing the packet forwarding diagnostics  required for this.  As a result, tracking-down the source of a  flood-type denial-of-services (DoS) attack is usually difficult or  impossible in these networks.  CenterTrack  is an overlay network, consisting of IP tunnels or other connections,  that is used to selectively reroute interesting datagrams directly from  edge routers to special tracking routers.  The tracking routers, or  associated sniffers, can easily determine the ingress edge router by  observing from which tunnel the datagrams arrive.  The datagrams can be  examined, then dropped or forwarded to the appropriate egress point.  This system simplifies the work required to determine the ingress  adjacency of a flood attack while bypassing any equipment which may be  incapable of performing the necessary diagnostic functions.
IPsec is a suite of standard protocols that provides security services for Internet communications. It protects the entire IP datagram in an "end-to-end" fashion; no intermediate network node in the public Internet can access or modify any information above the IP layer in an IPsec-protected packet. However, recent advances in internet technology introduce a rich new set of services and applications, like traffic engineering, TCP performance enhancements, or transparent proxying and caching, all of which require intermediate network nodes to access a certain part of an IP datagram, usually the upper layer protocol information, to perform flow classification, constraint-based routing, or other customized processing. This is in direct conflict with the IPsec mechanisms. In this research, we propose a multi-layer security protection scheme for IPsec, which uses a finer-grain access control to allow trusted intermediate routers to read and write selected portions of IP datagrams (usually the headers) in a secure and controlled manner.
This paper describes the design and implementation of a TCP/IP stack fingerprint scrubber. The fingerprint scrubber is a new tool to restrict a remote user's ability to determine the operating system of another host on the network. Allowing entire subnetworks to be remotely scanned and characterized opens up security vulnerabilities. Specifically, operating system exploits can be efficiently run against a pre-scanned network because exploits will usually only work against a specific operating system or software running on that platform. The fingerprint scrubber works at both the network and transport layers to convert ambiguous traffic from a heterogeneous group of hosts into sanitized packets that do not reveal clues about the hosts' operating systems.  This paper evaluates the performance of a fingerprint scrubber implemented in the FreeBSD kernel  and looks at the limitations of this approach.
This paper introduces an approach that integrates intrusion detection (ID) techniques with software wrapping technology to enhance a system's ability to defend against intrusions. In particular, we employ the NAI Labs Generic Software Wrapper Toolkit to implement all or part of an intrusion detection system as ID wrappers. An ID wrapper is a software layer dynamically inserted into the kernel that can selectively intercept and analyze system calls performed by processes as well as respond to intrusive events. We have implemented several ID wrappers that employ three different major intrusion detection techniques. Also, we have combined different ID techniques by composing ID wrappers at run-time. We tested the individual and composed ID wrappers using several existing attacks and measured their impact on observed application performance. We conclude that intrusion detection algorithms can be easily encoded as wrappers that perform efficiently inside the kernel. Also, kernel-resident ID wrappers can be easily managed, allowing cooperation among multiple combined techniques to enforce a coherent global ID policy. In addition, intrusion detection algorithms can benefit from the extra data made accessible by wrappers.
Backdoors  are often installed by attackers who have compromised a system to ease  their subsequent return to the system.  We consider the problem of  identifying a large class of backdoors, namely those providing  interactive access on non-standard ports, by passively monitoring a  site's Internet access link.  We develop a general algorithm for  detecting interactive traffic based on packet size and timing  characteristics, and a set of protocol-specific alortithms that look for  signatures distinctive to particular protocols.  We evaluate the  algorithms on large Internet access traces and find that they perform  quite well.  In addition, some of the algorithms are amenable to  prefiltering using a stateless packet filter, which yields a major  performance increase at little or no loss of accuracy.  However, the  success of the algorithms is tempered by the discovery that large sites  have many users who routinely access what are in fact benign backdoors,  such as servers running on non-standard ports not to hide, but for  mundane administrative reasons.  Hence, backdoor detection also requires  a significant policy component for separating allowable backdoor access  from surreptitious access.
One widely-used technique by which network attackers attain anonymity and complicate their apprehension is by employing stepping stones:  they launch attacks not from their own computer but from intermediary  hosts that they previously compromised.  We develop an efficient  algorithm for detecting stepping stones by monitoring a site's Internet  access link.  The algorithm is based on the distinctive characteristics  (packet size, timing) of interactive traffic, and not on connection  contents, and hence can be used to find stepping stones even when the  traffic is encrypted.  We evaluate the algorithm on large Internet  access traces and find that it performs quite well.  However, the  success of the algorithm is tempered by the discovery that large sites  have many users who routinely traverse stepping stones for a variety of  legitimate reasons.  Hence, stepping-stone detection also requires a  significant policy component for separating allowable stepping-stone  pairs from surreptitious access.
Automated intrusion response is an important unsolved problem in computer security.  A system called pH (for process homeostasis) is described which can successfully detect and stop intrusions before the target system is compromised.  In its current form, pH monitors every executing process on a computer at the system-call level, and responds to anomalies by either delaying or aborting system calls.  The paper presents the rationale for pH, its design and implementation, and a set of initial experimental results.
Current crypto implementations rely on software running under general-purpose operating systems alongside a horde of untrusted applications, ActiveX controls, web browser plugins, mailers handling messages with embedded active content, and numerous other threats to security, with only the OSÃ•s (often almost nonexistant) security to keep the two apart.  This paper presents a general-purpose open-source crypto coprocessor capable of securely performing crypto operations such as key management, certificate creation and handling, and email encryption, decryption, and signing, at a cost one to two orders of magnitude below that of commercial equivalents while providing generally equivalent performance and a higher level of functionality.  The paper examines various issues involved in designing the coprocessor, and explores options for hardware acceleration of crypto operations for extended performance above and beyond that offered by the basic coprocessor's COTS hardware.
The nightmare of Trusted Third Party (T3P)  based protocol users is compromise of the T3P.  Because the compromised  T3P can read and modify any user information, the entire user group  becomes vulnerable to secret revelation and user impersonation.  Kerberos, one of the most widely used network authentication protocols, is no exception.  When the Kerberos Key Distribution Center (KDC)  is compromised, all the user keys are exposed, thus revealing all the  encrypted data and allowing an adversary to impersonate any user.    If  an adversary has physical access to the KDC host, or can obtain  administrator rights, KDC compromise is possible, and catastrophic.  To  solve this problem, and to demonstrate the capabilities of secure  hardware, we have integrated the IBM 4758 secure coprocessor into  Kerberos V5 KDC.  As a result of the integration, our implemented KDC  preserves security even if the KDC host has been compromised.
A virtual machine monitor (VMM) allows multiple operating systems to run concurrently on virtual machines (VMs) on a single hardware platform. Each VM can be treated as an independent operating system platform. A secure VMM would enforce an overarching security policy on its VMs.  The potential benefits of a secure VMM for PCs include: a more secure environment, familiar COTS operating systems and applications, and enormous savings resulting from the elimination of the need for separate platforms when both high assurance policy enforcement, and COTS software are required.  This paper addresses the problem of implementing secure VMMs on the Intel Pentium architecture. The requirements for various types of VMMs are reviewed. We report an analysis of the virtualizability of all of the approximately 250 instructions of the Intel Pentium platform and address its ability to support a VMM. Current "virtualization" techniques for the Intel Pentium architecture are examined and several security problems are identified. An approach to providing a virtualizable hardware base for a highly secure VMM is discussed.
We describe a system that we have designed and  implemented for publishing content on the web. Our publishing  scheme has the property that it is very difficult for any  adversary to censor or modify the content. In addition, the  identity of the publisher is protected once the content is  posted. Our system differs from others in that we provide  tools for updating or deleting the published content, and  users can browse the content in the normal point and click  manner using a standard web browser and a client-side proxy  that we provide. All of our code is freely available.
A large  number of people digitally sign the same document.  The signature  collectors want to use only a small amount of memory to demonstrate to  any third party approximately how many persons have signed it.  The  scheme described in this paper uses a non-uniform secure hash function  to select a small subset of signatures that the collectors store.  The  size of this subset becomes a verifiable estimate for the logarithm of  the number of signers.  Applications  for this scheme range from Web page metering, through ranking  mechanisms for electronic discussion systems, to the distributed  verifiable and scalable delegation of power in jointly-administrated  systems.
One of the core challenges facing the Internet today is the problem of ensuring privacy for its users. It is believed that mechanisms such as anonymity and pseudonymity are essential building blocks in formulating solutions to address these challenges and considerable effort has been devoted towards realizing these primitives in practice. The focus of this effort, however, has mostly been on hiding explicit  identity information (such as source addresses) by employing a   combination of anonymizing proxies, cryptographic techniques to  distribute trust among them and traffic shaping techniques to defeat traffic analysis. We claim that such approaches ignore a significant amount of identifying information about the source that leaks from the contents of web traffic itself.  In this paper, we demonstrate the significance and value of such information by showing how techniques from linguistics and stylometry can use this information to compromise pseudonymity in several important settings. We discuss the severity of this problem and suggest possible countermeasures.
Designing a  suitable confinement mechanism to confine untrusted applications is  challenging as such a mechanism needs to satisfy conflicting  requirements.  The main trade-off is between ease of use and  flexibiilty.  In this paper, we present the design, implementation and  evaluation of MAPbox, a confinement mechanism that retains the ease of use of application-class-specific sandboxes such as the Java applet sandbox and the Janus  document viewer sandbox while providing significantly more flexibility.   The key idea is to group application behaviors into classes based on  their expected functionality and the resources required to achieve that  functionality.  Classification of application behavior provides a set of  labels (e.g., compiler, reader, netclient) that can be used to concisely communicate the expected functionality of programs between the provider and the users.  This is similar to MIME-types which are widely used to concisely describe the expected format  of data files.  An end-user lists the set of application behaviors she  is willing to allow in a file.  With each label, she associates a  sandbox that limits access to the set of recources needed to achieve the  corresponding behavior.  When an untrusted applicaiton is to be run  this file is consulted.  If the label (or the MAP-type) associated with  the application is not found in this file, it is not allowed to run.   Else, the MAP-type is used to automatcially locate and instantiate the  appropriate sandbox.  We believe that this may be an acceptable level of  user interaction since a similar technique (i.e., MIME-types) has been  fairly successful for handling documents with different formats.  In  this paper, we present a set of application behavior classes that we  have identified based on a study of a diverse suite of applications that  includes CGI scripts, programs, downloaded form well-known web  repositories and applications from the Solaris 5.6 distribution.  We  describe the implementation and usage of MAPbox.  We evaluate MAPbox  from two different perspectives: its effectiveness (how well it is able  to confine a suite of untrusted applications) and efficiency (what is  the overhead introduced).  Finally, we describe our experience with  MAPbox and discuss potential limitations of this approach.
The JavaTM  Virtual Machine is viewed by many as inherently insecure despite all  the efforts to improve its security.  In this paper we take a different  approach to Java security and describe the design and implementation of a  system that provides operating system style protection for Java code.   We use hardware protection domains to separate Java classes, provide  access control on cross domain method invocations, efficient data  sharing between protection domains, and memory and CPU resource control.   These security measures, when they do not violate the policy, are all  transparent to the Java programs, even when a subclass is in one domain  and its superclass is in another.  To reduce the performance impact we  group classes and share them between protection domains and map data on  demand as it is being shared.
In modern operating systems, cryptographic file systems can protect confidential data from unauthorized access. However, once an authorized process has accessed data from a cryptographic file system, the data can appear as plaintext in the unprotected virtual memory backing store, even after system shutdown. The solution described in this paper uses swap encryption for processes in possession of confidential data. Volatile encryption keys are chosen randomly, and remain valid only for short time periods. Invalid encryption keys are deleted, effectively erasing all data that was encrypted with them. The swap encryption system has been implemented for the UVMÂ  virtual memory system and its performance is acceptable.
Current secure systems suffer because they neglect the importance of human factors in security. We address a fundamental weakness of knowledge-based authentication schemes, which is the human limitation to remember secure passwords. Our approach to improve the security of these systems relies on recognition-based, rather than recall-based authentication. We examine the requirements of a recognition-based authentication system and propose DÃ©jÃ  Vu, which authenticates a user through her ability to recognize previously seen images. DÃ©jÃ  Vu is more reliable and easier to use than traditional recall-based schemes, which require the user to precisely recall passwords or PINs.  Furthermore, it has the advantage that it prevents users from choosing weak passwords and makes it difficult to write down or share passwords with others.  We develop a prototype of DÃ©jÃ  Vu and conduct a user study that compares it to traditional password and PIN authentication. Our user study shows that 90% of all participants succeeded in the authentication tests using DÃ©jÃ  Vu while only about 70% succeeded using passwords and PINS.  Our findings indicate that DÃ©jÃ  Vu has potential applications, especially where text input is hard (e.g., PDAs or ATMs), or in situations where passwords are infrequently used (e.g., web site passwords). Keywords: Human factors in security, hash visualization, user authentication through image recognition, recognition-based authentication.
